
001HumidtyMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031bc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003344  08003344  00013344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800335c  0800335c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800335c  0800335c  0001335c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003364  08003364  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003364  08003364  00013364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003368  08003368  00013368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800336c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000000c  08003378  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08003378  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ccac  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a77  00000000  00000000  0002cce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e08  00000000  00000000  0002e760  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d30  00000000  00000000  0002f568  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002143b  00000000  00000000  00030298  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000099e1  00000000  00000000  000516d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cedbc  00000000  00000000  0005b0b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00129e70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bd0  00000000  00000000  00129eec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800332c 	.word	0x0800332c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800332c 	.word	0x0800332c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <pin_out>:
volatile uint16_t parity;
volatile uint16_t hum_real, temp_real;
volatile int TEMPERATURE, HUMIDITY;

void pin_out (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	f107 030c 	add.w	r3, r7, #12
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
 80004e2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80004e4:	887b      	ldrh	r3, [r7, #2]
 80004e6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e8:	2301      	movs	r3, #1
 80004ea:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80004f4:	f107 030c 	add.w	r3, r7, #12
 80004f8:	4619      	mov	r1, r3
 80004fa:	6878      	ldr	r0, [r7, #4]
 80004fc:	f001 f906 	bl	800170c <HAL_GPIO_Init>
}
 8000500:	bf00      	nop
 8000502:	3720      	adds	r7, #32
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <pin_in>:

void pin_in (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	460b      	mov	r3, r1
 8000512:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000524:	887b      	ldrh	r3, [r7, #2]
 8000526:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000528:	2300      	movs	r3, #0
 800052a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800052c:	2301      	movs	r3, #1
 800052e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000530:	2300      	movs	r3, #0
 8000532:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	4619      	mov	r1, r3
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f001 f8e6 	bl	800170c <HAL_GPIO_Init>
}
 8000540:	bf00      	nop
 8000542:	3720      	adds	r7, #32
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <DHT11_Start>:

void DHT11_Start (void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	pin_out (dht11_GPIO_Port, dht11_Pin);
 800054c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000550:	480e      	ldr	r0, [pc, #56]	; (800058c <DHT11_Start+0x44>)
 8000552:	f7ff ffb9 	bl	80004c8 <pin_out>
	HAL_GPIO_WritePin (dht11_GPIO_Port, dht11_Pin, DISABLE);
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800055c:	480b      	ldr	r0, [pc, #44]	; (800058c <DHT11_Start+0x44>)
 800055e:	f001 fa87 	bl	8001a70 <HAL_GPIO_WritePin>
	delay(18000);
 8000562:	f244 6050 	movw	r0, #18000	; 0x4650
 8000566:	f000 f935 	bl	80007d4 <delay>
	HAL_GPIO_WritePin(dht11_GPIO_Port, dht11_Pin, ENABLE);
 800056a:	2201      	movs	r2, #1
 800056c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000570:	4806      	ldr	r0, [pc, #24]	; (800058c <DHT11_Start+0x44>)
 8000572:	f001 fa7d 	bl	8001a70 <HAL_GPIO_WritePin>
	delay(20);
 8000576:	2014      	movs	r0, #20
 8000578:	f000 f92c 	bl	80007d4 <delay>
	pin_in(dht11_GPIO_Port, dht11_Pin);
 800057c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000580:	4802      	ldr	r0, [pc, #8]	; (800058c <DHT11_Start+0x44>)
 8000582:	f7ff ffc1 	bl	8000508 <pin_in>
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40020000 	.word	0x40020000

08000590 <check_status>:

uint8_t check_status (void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	71fb      	strb	r3, [r7, #7]
	delay (40);
 800059a:	2028      	movs	r0, #40	; 0x28
 800059c:	f000 f91a 	bl	80007d4 <delay>
	if (!(HAL_GPIO_ReadPin (dht11_GPIO_Port, dht11_Pin)))
 80005a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a4:	4811      	ldr	r0, [pc, #68]	; (80005ec <check_status+0x5c>)
 80005a6:	f001 fa4b 	bl	8001a40 <HAL_GPIO_ReadPin>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d10f      	bne.n	80005d0 <check_status+0x40>
	{
		delay (80);
 80005b0:	2050      	movs	r0, #80	; 0x50
 80005b2:	f000 f90f 	bl	80007d4 <delay>
		if ((HAL_GPIO_ReadPin (dht11_GPIO_Port, dht11_Pin)))
 80005b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ba:	480c      	ldr	r0, [pc, #48]	; (80005ec <check_status+0x5c>)
 80005bc:	f001 fa40 	bl	8001a40 <HAL_GPIO_ReadPin>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d002      	beq.n	80005cc <check_status+0x3c>
			status = 1;
 80005c6:	2301      	movs	r3, #1
 80005c8:	71fb      	strb	r3, [r7, #7]
 80005ca:	e001      	b.n	80005d0 <check_status+0x40>
		else
			status = -1;
 80005cc:	23ff      	movs	r3, #255	; 0xff
 80005ce:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (dht11_GPIO_Port, dht11_Pin)));
 80005d0:	bf00      	nop
 80005d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <check_status+0x5c>)
 80005d8:	f001 fa32 	bl	8001a40 <HAL_GPIO_ReadPin>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1f7      	bne.n	80005d2 <check_status+0x42>
	return status;
 80005e2:	79fb      	ldrb	r3, [r7, #7]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40020000 	.word	0x40020000

080005f0 <Temp_Input>:

uint8_t Temp_Input (void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80005f6:	2300      	movs	r3, #0
 80005f8:	71bb      	strb	r3, [r7, #6]
 80005fa:	e03a      	b.n	8000672 <Temp_Input+0x82>
	{
		while (!(HAL_GPIO_ReadPin (dht11_GPIO_Port, dht11_Pin)));
 80005fc:	bf00      	nop
 80005fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000602:	4820      	ldr	r0, [pc, #128]	; (8000684 <Temp_Input+0x94>)
 8000604:	f001 fa1c 	bl	8001a40 <HAL_GPIO_ReadPin>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d0f7      	beq.n	80005fe <Temp_Input+0xe>
		delay (40);
 800060e:	2028      	movs	r0, #40	; 0x28
 8000610:	f000 f8e0 	bl	80007d4 <delay>
		if (!(HAL_GPIO_ReadPin (dht11_GPIO_Port, dht11_Pin)))
 8000614:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000618:	481a      	ldr	r0, [pc, #104]	; (8000684 <Temp_Input+0x94>)
 800061a:	f001 fa11 	bl	8001a40 <HAL_GPIO_ReadPin>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d10e      	bne.n	8000642 <Temp_Input+0x52>
		{
			i&= ~(1<<(7-j));
 8000624:	79bb      	ldrb	r3, [r7, #6]
 8000626:	f1c3 0307 	rsb	r3, r3, #7
 800062a:	2201      	movs	r2, #1
 800062c:	fa02 f303 	lsl.w	r3, r2, r3
 8000630:	b25b      	sxtb	r3, r3
 8000632:	43db      	mvns	r3, r3
 8000634:	b25a      	sxtb	r2, r3
 8000636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063a:	4013      	ands	r3, r2
 800063c:	b25b      	sxtb	r3, r3
 800063e:	71fb      	strb	r3, [r7, #7]
 8000640:	e00b      	b.n	800065a <Temp_Input+0x6a>
		}
		else
		{
			i|= (1<<(7-j));
 8000642:	79bb      	ldrb	r3, [r7, #6]
 8000644:	f1c3 0307 	rsb	r3, r3, #7
 8000648:	2201      	movs	r2, #1
 800064a:	fa02 f303 	lsl.w	r3, r2, r3
 800064e:	b25a      	sxtb	r2, r3
 8000650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000654:	4313      	orrs	r3, r2
 8000656:	b25b      	sxtb	r3, r3
 8000658:	71fb      	strb	r3, [r7, #7]
		}
		while ((HAL_GPIO_ReadPin (dht11_GPIO_Port, dht11_Pin)));
 800065a:	bf00      	nop
 800065c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000660:	4808      	ldr	r0, [pc, #32]	; (8000684 <Temp_Input+0x94>)
 8000662:	f001 f9ed 	bl	8001a40 <HAL_GPIO_ReadPin>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d1f7      	bne.n	800065c <Temp_Input+0x6c>
	for (j=0;j<8;j++)
 800066c:	79bb      	ldrb	r3, [r7, #6]
 800066e:	3301      	adds	r3, #1
 8000670:	71bb      	strb	r3, [r7, #6]
 8000672:	79bb      	ldrb	r3, [r7, #6]
 8000674:	2b07      	cmp	r3, #7
 8000676:	d9c1      	bls.n	80005fc <Temp_Input+0xc>
	}
	return i;
 8000678:	79fb      	ldrb	r3, [r7, #7]
}
 800067a:	4618      	mov	r0, r3
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40020000 	.word	0x40020000

08000688 <main>:
static void MX_TIM6_Init(void);
static void MX_UART4_Init(void);
void delay (uint16_t time);

int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
  HAL_Init();
 800068e:	f000 fc35 	bl	8000efc <HAL_Init>
  SystemClock_Config();
 8000692:	f000 f8b7 	bl	8000804 <SystemClock_Config>
  MX_GPIO_Init();
 8000696:	f000 fa07 	bl	8000aa8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800069a:	f000 f96d 	bl	8000978 <MX_SPI1_Init>
  MX_ADC1_Init();
 800069e:	f000 f919 	bl	80008d4 <MX_ADC1_Init>
  MX_TIM6_Init();
 80006a2:	f000 f9a1 	bl	80009e8 <MX_TIM6_Init>
  MX_UART4_Init();
 80006a6:	f000 f9d5 	bl	8000a54 <MX_UART4_Init>

  HAL_TIM_Base_Start(&htim6);
 80006aa:	483c      	ldr	r0, [pc, #240]	; (800079c <main+0x114>)
 80006ac:	f002 f907 	bl	80028be <HAL_TIM_Base_Start>

  while (1)
  {

		  HAL_GPIO_TogglePin(led_blue_GPIO_Port, led_blue_Pin);
 80006b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006b4:	483a      	ldr	r0, [pc, #232]	; (80007a0 <main+0x118>)
 80006b6:	f001 f9f4 	bl	8001aa2 <HAL_GPIO_TogglePin>
		  DHT11_Start();
 80006ba:	f7ff ff45 	bl	8000548 <DHT11_Start>
		  status = check_status();
 80006be:	f7ff ff67 	bl	8000590 <check_status>
 80006c2:	4603      	mov	r3, r0
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b37      	ldr	r3, [pc, #220]	; (80007a4 <main+0x11c>)
 80006c8:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(slave_select_GPIO_Port, slave_select_Pin, DISABLE);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2110      	movs	r1, #16
 80006ce:	4836      	ldr	r0, [pc, #216]	; (80007a8 <main+0x120>)
 80006d0:	f001 f9ce 	bl	8001a70 <HAL_GPIO_WritePin>
		  if (status == 1)
 80006d4:	4b33      	ldr	r3, [pc, #204]	; (80007a4 <main+0x11c>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d158      	bne.n	8000790 <main+0x108>
		  {
			  humidity_high = Temp_Input();
 80006de:	f7ff ff87 	bl	80005f0 <Temp_Input>
 80006e2:	4603      	mov	r3, r0
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b31      	ldr	r3, [pc, #196]	; (80007ac <main+0x124>)
 80006e8:	701a      	strb	r2, [r3, #0]
			  humidity_low = Temp_Input();
 80006ea:	f7ff ff81 	bl	80005f0 <Temp_Input>
 80006ee:	4603      	mov	r3, r0
 80006f0:	461a      	mov	r2, r3
 80006f2:	4b2f      	ldr	r3, [pc, #188]	; (80007b0 <main+0x128>)
 80006f4:	701a      	strb	r2, [r3, #0]
			  temperature_high = Temp_Input();
 80006f6:	f7ff ff7b 	bl	80005f0 <Temp_Input>
 80006fa:	4603      	mov	r3, r0
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b2d      	ldr	r3, [pc, #180]	; (80007b4 <main+0x12c>)
 8000700:	701a      	strb	r2, [r3, #0]
			  temperature_low = Temp_Input();
 8000702:	f7ff ff75 	bl	80005f0 <Temp_Input>
 8000706:	4603      	mov	r3, r0
 8000708:	461a      	mov	r2, r3
 800070a:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <main+0x130>)
 800070c:	701a      	strb	r2, [r3, #0]
			  parity = Temp_Input();
 800070e:	f7ff ff6f 	bl	80005f0 <Temp_Input>
 8000712:	4603      	mov	r3, r0
 8000714:	b29a      	uxth	r2, r3
 8000716:	4b29      	ldr	r3, [pc, #164]	; (80007bc <main+0x134>)
 8000718:	801a      	strh	r2, [r3, #0]
			  hum_real = humidity_high;
 800071a:	4b24      	ldr	r3, [pc, #144]	; (80007ac <main+0x124>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	b2db      	uxtb	r3, r3
 8000720:	b29a      	uxth	r2, r3
 8000722:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <main+0x138>)
 8000724:	801a      	strh	r2, [r3, #0]
			  temp_real = temperature_high;
 8000726:	4b23      	ldr	r3, [pc, #140]	; (80007b4 <main+0x12c>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	b2db      	uxtb	r3, r3
 800072c:	b29a      	uxth	r2, r3
 800072e:	4b25      	ldr	r3, [pc, #148]	; (80007c4 <main+0x13c>)
 8000730:	801a      	strh	r2, [r3, #0]
			  TEMPERATURE = (int)temp_real;
 8000732:	4b24      	ldr	r3, [pc, #144]	; (80007c4 <main+0x13c>)
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	b29b      	uxth	r3, r3
 8000738:	461a      	mov	r2, r3
 800073a:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <main+0x140>)
 800073c:	601a      	str	r2, [r3, #0]
			  HUMIDITY = (int)hum_real;
 800073e:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <main+0x138>)
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	b29b      	uxth	r3, r3
 8000744:	461a      	mov	r2, r3
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <main+0x144>)
 8000748:	601a      	str	r2, [r3, #0]
			  uint8_t temp1 = (uint8_t)HUMIDITY;
 800074a:	4b20      	ldr	r3, [pc, #128]	; (80007cc <main+0x144>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	71fb      	strb	r3, [r7, #7]
			  uint8_t temp2 = (uint8_t)TEMPERATURE;
 8000750:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <main+0x140>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	b2db      	uxtb	r3, r3
 8000756:	71bb      	strb	r3, [r7, #6]
			  if(temp2>15 && temp2<=23)                        				//Ambient Temperature Condition
 8000758:	79bb      	ldrb	r3, [r7, #6]
 800075a:	2b0f      	cmp	r3, #15
 800075c:	d907      	bls.n	800076e <main+0xe6>
 800075e:	79bb      	ldrb	r3, [r7, #6]
 8000760:	2b17      	cmp	r3, #23
 8000762:	d804      	bhi.n	800076e <main+0xe6>
				  HAL_GPIO_TogglePin(led_green_GPIO_Port, led_green_Pin);
 8000764:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000768:	480d      	ldr	r0, [pc, #52]	; (80007a0 <main+0x118>)
 800076a:	f001 f99a 	bl	8001aa2 <HAL_GPIO_TogglePin>
			  if(temp2>23)
 800076e:	79bb      	ldrb	r3, [r7, #6]
 8000770:	2b17      	cmp	r3, #23
 8000772:	d904      	bls.n	800077e <main+0xf6>
				  HAL_GPIO_TogglePin(led_red_GPIO_Port, led_red_Pin);
 8000774:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000778:	4809      	ldr	r0, [pc, #36]	; (80007a0 <main+0x118>)
 800077a:	f001 f992 	bl	8001aa2 <HAL_GPIO_TogglePin>
			  HAL_SPI_Transmit(&hspi1, &temp2, 1, 10);
 800077e:	1db9      	adds	r1, r7, #6
 8000780:	230a      	movs	r3, #10
 8000782:	2201      	movs	r2, #1
 8000784:	4812      	ldr	r0, [pc, #72]	; (80007d0 <main+0x148>)
 8000786:	f001 fe8f 	bl	80024a8 <HAL_SPI_Transmit>
			  HAL_Delay(100);
 800078a:	2064      	movs	r0, #100	; 0x64
 800078c:	f000 fc28 	bl	8000fe0 <HAL_Delay>
		  }
	  delay(1000);
 8000790:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000794:	f000 f81e 	bl	80007d4 <delay>
		  HAL_GPIO_TogglePin(led_blue_GPIO_Port, led_blue_Pin);
 8000798:	e78a      	b.n	80006b0 <main+0x28>
 800079a:	bf00      	nop
 800079c:	20000080 	.word	0x20000080
 80007a0:	40020c00 	.word	0x40020c00
 80007a4:	20000161 	.word	0x20000161
 80007a8:	40020000 	.word	0x40020000
 80007ac:	20000078 	.word	0x20000078
 80007b0:	20000160 	.word	0x20000160
 80007b4:	2000002a 	.word	0x2000002a
 80007b8:	2000007c 	.word	0x2000007c
 80007bc:	20000028 	.word	0x20000028
 80007c0:	200000c0 	.word	0x200000c0
 80007c4:	2000007a 	.word	0x2000007a
 80007c8:	2000002c 	.word	0x2000002c
 80007cc:	2000015c 	.word	0x2000015c
 80007d0:	20000104 	.word	0x20000104

080007d4 <delay>:
  return 0;
}


void delay (uint16_t time)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <delay+0x2c>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim6))<time);
 80007e6:	bf00      	nop
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <delay+0x2c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007ee:	88fb      	ldrh	r3, [r7, #6]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d3f9      	bcc.n	80007e8 <delay+0x14>
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	20000080 	.word	0x20000080

08000804 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b094      	sub	sp, #80	; 0x50
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 0320 	add.w	r3, r7, #32
 800080e:	2230      	movs	r2, #48	; 0x30
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f002 fd82 	bl	800331c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000828:	2300      	movs	r3, #0
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	4b27      	ldr	r3, [pc, #156]	; (80008cc <SystemClock_Config+0xc8>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000830:	4a26      	ldr	r2, [pc, #152]	; (80008cc <SystemClock_Config+0xc8>)
 8000832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000836:	6413      	str	r3, [r2, #64]	; 0x40
 8000838:	4b24      	ldr	r3, [pc, #144]	; (80008cc <SystemClock_Config+0xc8>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000844:	2300      	movs	r3, #0
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <SystemClock_Config+0xcc>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a20      	ldr	r2, [pc, #128]	; (80008d0 <SystemClock_Config+0xcc>)
 800084e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000852:	6013      	str	r3, [r2, #0]
 8000854:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <SystemClock_Config+0xcc>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000860:	2301      	movs	r3, #1
 8000862:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000864:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086a:	2302      	movs	r3, #2
 800086c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000872:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000874:	2304      	movs	r3, #4
 8000876:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000878:	2332      	movs	r3, #50	; 0x32
 800087a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800087c:	2302      	movs	r3, #2
 800087e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000880:	2307      	movs	r3, #7
 8000882:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000884:	f107 0320 	add.w	r3, r7, #32
 8000888:	4618      	mov	r0, r3
 800088a:	f001 f949 	bl	8001b20 <HAL_RCC_OscConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000894:	f000 f996 	bl	8000bc4 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000898:	230f      	movs	r3, #15
 800089a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089c:	2302      	movs	r3, #2
 800089e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	2101      	movs	r1, #1
 80008b4:	4618      	mov	r0, r3
 80008b6:	f001 fba3 	bl	8002000 <HAL_RCC_ClockConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008c0:	f000 f980 	bl	8000bc4 <Error_Handler>
  }
}
 80008c4:	bf00      	nop
 80008c6:	3750      	adds	r7, #80	; 0x50
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40007000 	.word	0x40007000

080008d4 <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80008da:	463b      	mov	r3, r7
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]

  hadc1.Instance = ADC1;
 80008e6:	4b21      	ldr	r3, [pc, #132]	; (800096c <MX_ADC1_Init+0x98>)
 80008e8:	4a21      	ldr	r2, [pc, #132]	; (8000970 <MX_ADC1_Init+0x9c>)
 80008ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008ec:	4b1f      	ldr	r3, [pc, #124]	; (800096c <MX_ADC1_Init+0x98>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80008f2:	4b1e      	ldr	r3, [pc, #120]	; (800096c <MX_ADC1_Init+0x98>)
 80008f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80008f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008fa:	4b1c      	ldr	r3, [pc, #112]	; (800096c <MX_ADC1_Init+0x98>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000900:	4b1a      	ldr	r3, [pc, #104]	; (800096c <MX_ADC1_Init+0x98>)
 8000902:	2200      	movs	r2, #0
 8000904:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000906:	4b19      	ldr	r3, [pc, #100]	; (800096c <MX_ADC1_Init+0x98>)
 8000908:	2200      	movs	r2, #0
 800090a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800090e:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_ADC1_Init+0x98>)
 8000910:	2200      	movs	r2, #0
 8000912:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_ADC1_Init+0x98>)
 8000916:	4a17      	ldr	r2, [pc, #92]	; (8000974 <MX_ADC1_Init+0xa0>)
 8000918:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_ADC1_Init+0x98>)
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_ADC1_Init+0x98>)
 8000922:	2201      	movs	r2, #1
 8000924:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_ADC1_Init+0x98>)
 8000928:	2200      	movs	r2, #0
 800092a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_ADC1_Init+0x98>)
 8000930:	2201      	movs	r2, #1
 8000932:	615a      	str	r2, [r3, #20]

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000934:	480d      	ldr	r0, [pc, #52]	; (800096c <MX_ADC1_Init+0x98>)
 8000936:	f000 fb75 	bl	8001024 <HAL_ADC_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000940:	f000 f940 	bl	8000bc4 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_1;
 8000944:	2301      	movs	r3, #1
 8000946:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000948:	2301      	movs	r3, #1
 800094a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800094c:	2302      	movs	r3, #2
 800094e:	60bb      	str	r3, [r7, #8]

  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000950:	463b      	mov	r3, r7
 8000952:	4619      	mov	r1, r3
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_ADC1_Init+0x98>)
 8000956:	f000 fba9 	bl	80010ac <HAL_ADC_ConfigChannel>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000960:	f000 f930 	bl	8000bc4 <Error_Handler>
  }
}
 8000964:	bf00      	nop
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000030 	.word	0x20000030
 8000970:	40012000 	.word	0x40012000
 8000974:	0f000001 	.word	0x0f000001

08000978 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <MX_SPI1_Init+0x68>)
 800097e:	4a19      	ldr	r2, [pc, #100]	; (80009e4 <MX_SPI1_Init+0x6c>)
 8000980:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_SPI1_Init+0x68>)
 8000984:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000988:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_SPI1_Init+0x68>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000990:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_SPI1_Init+0x68>)
 8000992:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000996:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_SPI1_Init+0x68>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <MX_SPI1_Init+0x68>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_SPI1_Init+0x68>)
 80009a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_SPI1_Init+0x68>)
 80009ae:	2228      	movs	r2, #40	; 0x28
 80009b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_SPI1_Init+0x68>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_SPI1_Init+0x68>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_SPI1_Init+0x68>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_SPI1_Init+0x68>)
 80009c6:	220a      	movs	r2, #10
 80009c8:	62da      	str	r2, [r3, #44]	; 0x2c

  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_SPI1_Init+0x68>)
 80009cc:	f001 fd08 	bl	80023e0 <HAL_SPI_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80009d6:	f000 f8f5 	bl	8000bc4 <Error_Handler>
  }
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000104 	.word	0x20000104
 80009e4:	40013000 	.word	0x40013000

080009e8 <MX_TIM6_Init>:

static void MX_TIM6_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ee:	463b      	mov	r3, r7
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_TIM6_Init+0x64>)
 80009f8:	4a15      	ldr	r2, [pc, #84]	; (8000a50 <MX_TIM6_Init+0x68>)
 80009fa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 80009fc:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <MX_TIM6_Init+0x64>)
 80009fe:	2231      	movs	r2, #49	; 0x31
 8000a00:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_TIM6_Init+0x64>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8000a08:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <MX_TIM6_Init+0x64>)
 8000a0a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000a0e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a10:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_TIM6_Init+0x64>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a16:	480d      	ldr	r0, [pc, #52]	; (8000a4c <MX_TIM6_Init+0x64>)
 8000a18:	f001 ff26 	bl	8002868 <HAL_TIM_Base_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000a22:	f000 f8cf 	bl	8000bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a26:	2300      	movs	r3, #0
 8000a28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]

  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a2e:	463b      	mov	r3, r7
 8000a30:	4619      	mov	r1, r3
 8000a32:	4806      	ldr	r0, [pc, #24]	; (8000a4c <MX_TIM6_Init+0x64>)
 8000a34:	f002 f808 	bl	8002a48 <HAL_TIMEx_MasterConfigSynchronization>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000a3e:	f000 f8c1 	bl	8000bc4 <Error_Handler>
  }
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000080 	.word	0x20000080
 8000a50:	40001000 	.word	0x40001000

08000a54 <MX_UART4_Init>:

static void MX_UART4_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  huart4.Instance = UART4;
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_UART4_Init+0x4c>)
 8000a5a:	4a12      	ldr	r2, [pc, #72]	; (8000aa4 <MX_UART4_Init+0x50>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <MX_UART4_Init+0x4c>)
 8000a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a64:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_UART4_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_UART4_Init+0x4c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <MX_UART4_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_UART4_Init+0x4c>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <MX_UART4_Init+0x4c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_UART4_Init+0x4c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_UART4_Init+0x4c>)
 8000a8c:	f002 f858 	bl	8002b40 <HAL_UART_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000a96:	f000 f895 	bl	8000bc4 <Error_Handler>
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200000c4 	.word	0x200000c4
 8000aa4:	40004c00 	.word	0x40004c00

08000aa8 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	4b3c      	ldr	r3, [pc, #240]	; (8000bb4 <MX_GPIO_Init+0x10c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a3b      	ldr	r2, [pc, #236]	; (8000bb4 <MX_GPIO_Init+0x10c>)
 8000ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b39      	ldr	r3, [pc, #228]	; (8000bb4 <MX_GPIO_Init+0x10c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	4b35      	ldr	r3, [pc, #212]	; (8000bb4 <MX_GPIO_Init+0x10c>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a34      	ldr	r2, [pc, #208]	; (8000bb4 <MX_GPIO_Init+0x10c>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b32      	ldr	r3, [pc, #200]	; (8000bb4 <MX_GPIO_Init+0x10c>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	4b2e      	ldr	r3, [pc, #184]	; (8000bb4 <MX_GPIO_Init+0x10c>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a2d      	ldr	r2, [pc, #180]	; (8000bb4 <MX_GPIO_Init+0x10c>)
 8000b00:	f043 0308 	orr.w	r3, r3, #8
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b2b      	ldr	r3, [pc, #172]	; (8000bb4 <MX_GPIO_Init+0x10c>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0308 	and.w	r3, r3, #8
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4b27      	ldr	r3, [pc, #156]	; (8000bb4 <MX_GPIO_Init+0x10c>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a26      	ldr	r2, [pc, #152]	; (8000bb4 <MX_GPIO_Init+0x10c>)
 8000b1c:	f043 0304 	orr.w	r3, r3, #4
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b24      	ldr	r3, [pc, #144]	; (8000bb4 <MX_GPIO_Init+0x10c>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0304 	and.w	r3, r3, #4
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(GPIOA, slave_select_Pin|dht11_Pin, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000b34:	4820      	ldr	r0, [pc, #128]	; (8000bb8 <MX_GPIO_Init+0x110>)
 8000b36:	f000 ff9b 	bl	8001a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, led_green_Pin|led_orange_Pin|led_red_Pin|led_blue_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000b40:	481e      	ldr	r0, [pc, #120]	; (8000bbc <MX_GPIO_Init+0x114>)
 8000b42:	f000 ff95 	bl	8001a70 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = button_Pin;
 8000b46:	2301      	movs	r3, #1
 8000b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b4a:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <MX_GPIO_Init+0x118>)
 8000b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	4817      	ldr	r0, [pc, #92]	; (8000bb8 <MX_GPIO_Init+0x110>)
 8000b5a:	f000 fdd7 	bl	800170c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = slave_select_Pin|dht11_Pin;
 8000b5e:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	4810      	ldr	r0, [pc, #64]	; (8000bb8 <MX_GPIO_Init+0x110>)
 8000b78:	f000 fdc8 	bl	800170c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = led_green_Pin|led_orange_Pin|led_red_Pin|led_blue_Pin;
 8000b7c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	4809      	ldr	r0, [pc, #36]	; (8000bbc <MX_GPIO_Init+0x114>)
 8000b96:	f000 fdb9 	bl	800170c <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	2006      	movs	r0, #6
 8000ba0:	f000 fd7d 	bl	800169e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ba4:	2006      	movs	r0, #6
 8000ba6:	f000 fd96 	bl	80016d6 <HAL_NVIC_EnableIRQ>

}
 8000baa:	bf00      	nop
 8000bac:	3728      	adds	r7, #40	; 0x28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020000 	.word	0x40020000
 8000bbc:	40020c00 	.word	0x40020c00
 8000bc0:	10110000 	.word	0x10110000

08000bc4 <Error_Handler>:

void Error_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <HAL_MspInit+0x4c>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	4a0f      	ldr	r2, [pc, #60]	; (8000c20 <HAL_MspInit+0x4c>)
 8000be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <HAL_MspInit+0x4c>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <HAL_MspInit+0x4c>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <HAL_MspInit+0x4c>)
 8000c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c04:	6413      	str	r3, [r2, #64]	; 0x40
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_MspInit+0x4c>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c12:	2007      	movs	r0, #7
 8000c14:	f000 fd38 	bl	8001688 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40023800 	.word	0x40023800

08000c24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a17      	ldr	r2, [pc, #92]	; (8000ca0 <HAL_ADC_MspInit+0x7c>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d127      	bne.n	8000c96 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <HAL_ADC_MspInit+0x80>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	4a15      	ldr	r2, [pc, #84]	; (8000ca4 <HAL_ADC_MspInit+0x80>)
 8000c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c54:	6453      	str	r3, [r2, #68]	; 0x44
 8000c56:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <HAL_ADC_MspInit+0x80>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <HAL_ADC_MspInit+0x80>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ca4 <HAL_ADC_MspInit+0x80>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <HAL_ADC_MspInit+0x80>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = pot_Pin;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c82:	2303      	movs	r3, #3
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(pot_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <HAL_ADC_MspInit+0x84>)
 8000c92:	f000 fd3b 	bl	800170c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c96:	bf00      	nop
 8000c98:	3728      	adds	r7, #40	; 0x28
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40012000 	.word	0x40012000
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020000 	.word	0x40020000

08000cac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	; 0x28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a19      	ldr	r2, [pc, #100]	; (8000d30 <HAL_SPI_MspInit+0x84>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d12b      	bne.n	8000d26 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	4a17      	ldr	r2, [pc, #92]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000cd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a10      	ldr	r2, [pc, #64]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d06:	23e0      	movs	r3, #224	; 0xe0
 8000d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d12:	2303      	movs	r3, #3
 8000d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d16:	2305      	movs	r3, #5
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <HAL_SPI_MspInit+0x8c>)
 8000d22:	f000 fcf3 	bl	800170c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d26:	bf00      	nop
 8000d28:	3728      	adds	r7, #40	; 0x28
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40013000 	.word	0x40013000
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020000 	.word	0x40020000

08000d3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a0b      	ldr	r2, [pc, #44]	; (8000d78 <HAL_TIM_Base_MspInit+0x3c>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d10d      	bne.n	8000d6a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <HAL_TIM_Base_MspInit+0x40>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	4a09      	ldr	r2, [pc, #36]	; (8000d7c <HAL_TIM_Base_MspInit+0x40>)
 8000d58:	f043 0310 	orr.w	r3, r3, #16
 8000d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5e:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <HAL_TIM_Base_MspInit+0x40>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f003 0310 	and.w	r3, r3, #16
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000d6a:	bf00      	nop
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40001000 	.word	0x40001000
 8000d7c:	40023800 	.word	0x40023800

08000d80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a19      	ldr	r2, [pc, #100]	; (8000e04 <HAL_UART_MspInit+0x84>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d12c      	bne.n	8000dfc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	4a17      	ldr	r2, [pc, #92]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000dac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000db0:	6413      	str	r3, [r2, #64]	; 0x40
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a10      	ldr	r2, [pc, #64]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000dda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de8:	2303      	movs	r3, #3
 8000dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000dec:	2308      	movs	r3, #8
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4619      	mov	r1, r3
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <HAL_UART_MspInit+0x8c>)
 8000df8:	f000 fc88 	bl	800170c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000dfc:	bf00      	nop
 8000dfe:	3728      	adds	r7, #40	; 0x28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40004c00 	.word	0x40004c00
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020800 	.word	0x40020800

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <HardFault_Handler+0x4>

08000e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <MemManage_Handler+0x4>

08000e2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <BusFault_Handler+0x4>

08000e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <UsageFault_Handler+0x4>

08000e36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e64:	f000 f89c 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e70:	2001      	movs	r0, #1
 8000e72:	f000 fe31 	bl	8001ad8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <SystemInit+0x28>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e86:	4a07      	ldr	r2, [pc, #28]	; (8000ea4 <SystemInit+0x28>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <SystemInit+0x28>)
 8000e92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e96:	609a      	str	r2, [r3, #8]
#endif
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000eac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000eae:	e003      	b.n	8000eb8 <LoopCopyDataInit>

08000eb0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000eb2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000eb4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000eb6:	3104      	adds	r1, #4

08000eb8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000eb8:	480b      	ldr	r0, [pc, #44]	; (8000ee8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ebc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ebe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ec0:	d3f6      	bcc.n	8000eb0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ec2:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ec4:	e002      	b.n	8000ecc <LoopFillZerobss>

08000ec6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ec6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ec8:	f842 3b04 	str.w	r3, [r2], #4

08000ecc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ece:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ed0:	d3f9      	bcc.n	8000ec6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ed2:	f7ff ffd3 	bl	8000e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ed6:	f002 f9fd 	bl	80032d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eda:	f7ff fbd5 	bl	8000688 <main>
  bx  lr    
 8000ede:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ee0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ee4:	0800336c 	.word	0x0800336c
  ldr  r0, =_sdata
 8000ee8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000eec:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000ef0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000ef4:	20000168 	.word	0x20000168

08000ef8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef8:	e7fe      	b.n	8000ef8 <ADC_IRQHandler>
	...

08000efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0d      	ldr	r2, [pc, #52]	; (8000f3c <HAL_Init+0x40>)
 8000f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <HAL_Init+0x40>)
 8000f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <HAL_Init+0x40>)
 8000f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f24:	2003      	movs	r0, #3
 8000f26:	f000 fbaf 	bl	8001688 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f000 f808 	bl	8000f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f30:	f7ff fe50 	bl	8000bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40023c00 	.word	0x40023c00

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_InitTick+0x54>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_InitTick+0x58>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 fbc7 	bl	80016f2 <HAL_SYSTICK_Config>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00e      	b.n	8000f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d80a      	bhi.n	8000f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	2200      	movs	r2, #0
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f000 fb8f 	bl	800169e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f80:	4a06      	ldr	r2, [pc, #24]	; (8000f9c <HAL_InitTick+0x5c>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e000      	b.n	8000f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000000 	.word	0x20000000
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	20000004 	.word	0x20000004

08000fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_IncTick+0x20>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	20000164 	.word	0x20000164

08000fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return uwTick;
 8000fcc:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <HAL_GetTick+0x14>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000164 	.word	0x20000164

08000fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe8:	f7ff ffee 	bl	8000fc8 <HAL_GetTick>
 8000fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff8:	d005      	beq.n	8001006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <HAL_Delay+0x40>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4413      	add	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001006:	bf00      	nop
 8001008:	f7ff ffde 	bl	8000fc8 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	429a      	cmp	r2, r3
 8001016:	d8f7      	bhi.n	8001008 <HAL_Delay+0x28>
  {
  }
}
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000008 	.word	0x20000008

08001024 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e033      	b.n	80010a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	2b00      	cmp	r3, #0
 8001040:	d109      	bne.n	8001056 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff fdee 	bl	8000c24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	f003 0310 	and.w	r3, r3, #16
 800105e:	2b00      	cmp	r3, #0
 8001060:	d118      	bne.n	8001094 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800106a:	f023 0302 	bic.w	r3, r3, #2
 800106e:	f043 0202 	orr.w	r2, r3, #2
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 f93a 	bl	80012f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f023 0303 	bic.w	r3, r3, #3
 800108a:	f043 0201 	orr.w	r2, r3, #1
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	641a      	str	r2, [r3, #64]	; 0x40
 8001092:	e001      	b.n	8001098 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d101      	bne.n	80010c8 <HAL_ADC_ConfigChannel+0x1c>
 80010c4:	2302      	movs	r3, #2
 80010c6:	e105      	b.n	80012d4 <HAL_ADC_ConfigChannel+0x228>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2201      	movs	r2, #1
 80010cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b09      	cmp	r3, #9
 80010d6:	d925      	bls.n	8001124 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	68d9      	ldr	r1, [r3, #12]
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	461a      	mov	r2, r3
 80010e6:	4613      	mov	r3, r2
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	4413      	add	r3, r2
 80010ec:	3b1e      	subs	r3, #30
 80010ee:	2207      	movs	r2, #7
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43da      	mvns	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	400a      	ands	r2, r1
 80010fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	68d9      	ldr	r1, [r3, #12]
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	689a      	ldr	r2, [r3, #8]
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	b29b      	uxth	r3, r3
 800110e:	4618      	mov	r0, r3
 8001110:	4603      	mov	r3, r0
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4403      	add	r3, r0
 8001116:	3b1e      	subs	r3, #30
 8001118:	409a      	lsls	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	430a      	orrs	r2, r1
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	e022      	b.n	800116a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6919      	ldr	r1, [r3, #16]
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	b29b      	uxth	r3, r3
 8001130:	461a      	mov	r2, r3
 8001132:	4613      	mov	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4413      	add	r3, r2
 8001138:	2207      	movs	r2, #7
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	400a      	ands	r2, r1
 8001146:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6919      	ldr	r1, [r3, #16]
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	b29b      	uxth	r3, r3
 8001158:	4618      	mov	r0, r3
 800115a:	4603      	mov	r3, r0
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4403      	add	r3, r0
 8001160:	409a      	lsls	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	430a      	orrs	r2, r1
 8001168:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2b06      	cmp	r3, #6
 8001170:	d824      	bhi.n	80011bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	4613      	mov	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	3b05      	subs	r3, #5
 8001184:	221f      	movs	r2, #31
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43da      	mvns	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	400a      	ands	r2, r1
 8001192:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	4618      	mov	r0, r3
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	3b05      	subs	r3, #5
 80011ae:	fa00 f203 	lsl.w	r2, r0, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	430a      	orrs	r2, r1
 80011b8:	635a      	str	r2, [r3, #52]	; 0x34
 80011ba:	e04c      	b.n	8001256 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b0c      	cmp	r3, #12
 80011c2:	d824      	bhi.n	800120e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	3b23      	subs	r3, #35	; 0x23
 80011d6:	221f      	movs	r2, #31
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43da      	mvns	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	400a      	ands	r2, r1
 80011e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	4613      	mov	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	3b23      	subs	r3, #35	; 0x23
 8001200:	fa00 f203 	lsl.w	r2, r0, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	430a      	orrs	r2, r1
 800120a:	631a      	str	r2, [r3, #48]	; 0x30
 800120c:	e023      	b.n	8001256 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	4613      	mov	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	3b41      	subs	r3, #65	; 0x41
 8001220:	221f      	movs	r2, #31
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43da      	mvns	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	400a      	ands	r2, r1
 800122e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	b29b      	uxth	r3, r3
 800123c:	4618      	mov	r0, r3
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	4613      	mov	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	3b41      	subs	r3, #65	; 0x41
 800124a:	fa00 f203 	lsl.w	r2, r0, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	430a      	orrs	r2, r1
 8001254:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001256:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <HAL_ADC_ConfigChannel+0x234>)
 8001258:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a21      	ldr	r2, [pc, #132]	; (80012e4 <HAL_ADC_ConfigChannel+0x238>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d109      	bne.n	8001278 <HAL_ADC_ConfigChannel+0x1cc>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b12      	cmp	r3, #18
 800126a:	d105      	bne.n	8001278 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a19      	ldr	r2, [pc, #100]	; (80012e4 <HAL_ADC_ConfigChannel+0x238>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d123      	bne.n	80012ca <HAL_ADC_ConfigChannel+0x21e>
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b10      	cmp	r3, #16
 8001288:	d003      	beq.n	8001292 <HAL_ADC_ConfigChannel+0x1e6>
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b11      	cmp	r3, #17
 8001290:	d11b      	bne.n	80012ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2b10      	cmp	r3, #16
 80012a4:	d111      	bne.n	80012ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <HAL_ADC_ConfigChannel+0x23c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a10      	ldr	r2, [pc, #64]	; (80012ec <HAL_ADC_ConfigChannel+0x240>)
 80012ac:	fba2 2303 	umull	r2, r3, r2, r3
 80012b0:	0c9a      	lsrs	r2, r3, #18
 80012b2:	4613      	mov	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012bc:	e002      	b.n	80012c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f9      	bne.n	80012be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	40012300 	.word	0x40012300
 80012e4:	40012000 	.word	0x40012000
 80012e8:	20000000 	.word	0x20000000
 80012ec:	431bde83 	.word	0x431bde83

080012f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012f8:	4b79      	ldr	r3, [pc, #484]	; (80014e0 <ADC_Init+0x1f0>)
 80012fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	431a      	orrs	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001324:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6859      	ldr	r1, [r3, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	021a      	lsls	r2, r3, #8
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	430a      	orrs	r2, r1
 8001338:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001348:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6859      	ldr	r1, [r3, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	430a      	orrs	r2, r1
 800135a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800136a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6899      	ldr	r1, [r3, #8]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68da      	ldr	r2, [r3, #12]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001382:	4a58      	ldr	r2, [pc, #352]	; (80014e4 <ADC_Init+0x1f4>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d022      	beq.n	80013ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001396:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6899      	ldr	r1, [r3, #8]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6899      	ldr	r1, [r3, #8]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	e00f      	b.n	80013ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 0202 	bic.w	r2, r2, #2
 80013fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6899      	ldr	r1, [r3, #8]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	7e1b      	ldrb	r3, [r3, #24]
 8001408:	005a      	lsls	r2, r3, #1
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	430a      	orrs	r2, r1
 8001410:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d01b      	beq.n	8001454 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800142a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800143a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6859      	ldr	r1, [r3, #4]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001446:	3b01      	subs	r3, #1
 8001448:	035a      	lsls	r2, r3, #13
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	e007      	b.n	8001464 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001462:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001472:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	3b01      	subs	r3, #1
 8001480:	051a      	lsls	r2, r3, #20
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001498:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6899      	ldr	r1, [r3, #8]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014a6:	025a      	lsls	r2, r3, #9
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6899      	ldr	r1, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	029a      	lsls	r2, r3, #10
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	609a      	str	r2, [r3, #8]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	40012300 	.word	0x40012300
 80014e4:	0f000001 	.word	0x0f000001

080014e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <__NVIC_SetPriorityGrouping+0x44>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001504:	4013      	ands	r3, r2
 8001506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001510:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151a:	4a04      	ldr	r2, [pc, #16]	; (800152c <__NVIC_SetPriorityGrouping+0x44>)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	60d3      	str	r3, [r2, #12]
}
 8001520:	bf00      	nop
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <__NVIC_GetPriorityGrouping+0x18>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	0a1b      	lsrs	r3, r3, #8
 800153a:	f003 0307 	and.w	r3, r3, #7
}
 800153e:	4618      	mov	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	2b00      	cmp	r3, #0
 800155c:	db0b      	blt.n	8001576 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	f003 021f 	and.w	r2, r3, #31
 8001564:	4907      	ldr	r1, [pc, #28]	; (8001584 <__NVIC_EnableIRQ+0x38>)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	095b      	lsrs	r3, r3, #5
 800156c:	2001      	movs	r0, #1
 800156e:	fa00 f202 	lsl.w	r2, r0, r2
 8001572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000e100 	.word	0xe000e100

08001588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	6039      	str	r1, [r7, #0]
 8001592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	2b00      	cmp	r3, #0
 800159a:	db0a      	blt.n	80015b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	490c      	ldr	r1, [pc, #48]	; (80015d4 <__NVIC_SetPriority+0x4c>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	0112      	lsls	r2, r2, #4
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	440b      	add	r3, r1
 80015ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b0:	e00a      	b.n	80015c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4908      	ldr	r1, [pc, #32]	; (80015d8 <__NVIC_SetPriority+0x50>)
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	3b04      	subs	r3, #4
 80015c0:	0112      	lsls	r2, r2, #4
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	440b      	add	r3, r1
 80015c6:	761a      	strb	r2, [r3, #24]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000e100 	.word	0xe000e100
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b089      	sub	sp, #36	; 0x24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f1c3 0307 	rsb	r3, r3, #7
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	bf28      	it	cs
 80015fa:	2304      	movcs	r3, #4
 80015fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3304      	adds	r3, #4
 8001602:	2b06      	cmp	r3, #6
 8001604:	d902      	bls.n	800160c <NVIC_EncodePriority+0x30>
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3b03      	subs	r3, #3
 800160a:	e000      	b.n	800160e <NVIC_EncodePriority+0x32>
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	f04f 32ff 	mov.w	r2, #4294967295
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43da      	mvns	r2, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	401a      	ands	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001624:	f04f 31ff 	mov.w	r1, #4294967295
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	43d9      	mvns	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001634:	4313      	orrs	r3, r2
         );
}
 8001636:	4618      	mov	r0, r3
 8001638:	3724      	adds	r7, #36	; 0x24
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001654:	d301      	bcc.n	800165a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001656:	2301      	movs	r3, #1
 8001658:	e00f      	b.n	800167a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165a:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <SysTick_Config+0x40>)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001662:	210f      	movs	r1, #15
 8001664:	f04f 30ff 	mov.w	r0, #4294967295
 8001668:	f7ff ff8e 	bl	8001588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <SysTick_Config+0x40>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001672:	4b04      	ldr	r3, [pc, #16]	; (8001684 <SysTick_Config+0x40>)
 8001674:	2207      	movs	r2, #7
 8001676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	e000e010 	.word	0xe000e010

08001688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff ff29 	bl	80014e8 <__NVIC_SetPriorityGrouping>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4603      	mov	r3, r0
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
 80016aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b0:	f7ff ff3e 	bl	8001530 <__NVIC_GetPriorityGrouping>
 80016b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	68b9      	ldr	r1, [r7, #8]
 80016ba:	6978      	ldr	r0, [r7, #20]
 80016bc:	f7ff ff8e 	bl	80015dc <NVIC_EncodePriority>
 80016c0:	4602      	mov	r2, r0
 80016c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff5d 	bl	8001588 <__NVIC_SetPriority>
}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4603      	mov	r3, r0
 80016de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff31 	bl	800154c <__NVIC_EnableIRQ>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ffa2 	bl	8001644 <SysTick_Config>
 8001700:	4603      	mov	r3, r0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	; 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800171e:	2300      	movs	r3, #0
 8001720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
 8001726:	e16b      	b.n	8001a00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001728:	2201      	movs	r2, #1
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	429a      	cmp	r2, r3
 8001742:	f040 815a 	bne.w	80019fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d00b      	beq.n	8001766 <HAL_GPIO_Init+0x5a>
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d007      	beq.n	8001766 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800175a:	2b11      	cmp	r3, #17
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b12      	cmp	r3, #18
 8001764:	d130      	bne.n	80017c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	2203      	movs	r2, #3
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800179c:	2201      	movs	r2, #1
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	f003 0201 	and.w	r2, r3, #1
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	2203      	movs	r2, #3
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0xfc>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b12      	cmp	r3, #18
 8001806:	d123      	bne.n	8001850 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	08da      	lsrs	r2, r3, #3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3208      	adds	r2, #8
 8001810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	220f      	movs	r2, #15
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	08da      	lsrs	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3208      	adds	r2, #8
 800184a:	69b9      	ldr	r1, [r7, #24]
 800184c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	2203      	movs	r2, #3
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0203 	and.w	r2, r3, #3
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 80b4 	beq.w	80019fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4b5f      	ldr	r3, [pc, #380]	; (8001a14 <HAL_GPIO_Init+0x308>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	4a5e      	ldr	r2, [pc, #376]	; (8001a14 <HAL_GPIO_Init+0x308>)
 800189c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a0:	6453      	str	r3, [r2, #68]	; 0x44
 80018a2:	4b5c      	ldr	r3, [pc, #368]	; (8001a14 <HAL_GPIO_Init+0x308>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ae:	4a5a      	ldr	r2, [pc, #360]	; (8001a18 <HAL_GPIO_Init+0x30c>)
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	089b      	lsrs	r3, r3, #2
 80018b4:	3302      	adds	r3, #2
 80018b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	220f      	movs	r2, #15
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a51      	ldr	r2, [pc, #324]	; (8001a1c <HAL_GPIO_Init+0x310>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d02b      	beq.n	8001932 <HAL_GPIO_Init+0x226>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a50      	ldr	r2, [pc, #320]	; (8001a20 <HAL_GPIO_Init+0x314>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d025      	beq.n	800192e <HAL_GPIO_Init+0x222>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4f      	ldr	r2, [pc, #316]	; (8001a24 <HAL_GPIO_Init+0x318>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d01f      	beq.n	800192a <HAL_GPIO_Init+0x21e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4e      	ldr	r2, [pc, #312]	; (8001a28 <HAL_GPIO_Init+0x31c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d019      	beq.n	8001926 <HAL_GPIO_Init+0x21a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4d      	ldr	r2, [pc, #308]	; (8001a2c <HAL_GPIO_Init+0x320>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d013      	beq.n	8001922 <HAL_GPIO_Init+0x216>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4c      	ldr	r2, [pc, #304]	; (8001a30 <HAL_GPIO_Init+0x324>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d00d      	beq.n	800191e <HAL_GPIO_Init+0x212>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a4b      	ldr	r2, [pc, #300]	; (8001a34 <HAL_GPIO_Init+0x328>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d007      	beq.n	800191a <HAL_GPIO_Init+0x20e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4a      	ldr	r2, [pc, #296]	; (8001a38 <HAL_GPIO_Init+0x32c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d101      	bne.n	8001916 <HAL_GPIO_Init+0x20a>
 8001912:	2307      	movs	r3, #7
 8001914:	e00e      	b.n	8001934 <HAL_GPIO_Init+0x228>
 8001916:	2308      	movs	r3, #8
 8001918:	e00c      	b.n	8001934 <HAL_GPIO_Init+0x228>
 800191a:	2306      	movs	r3, #6
 800191c:	e00a      	b.n	8001934 <HAL_GPIO_Init+0x228>
 800191e:	2305      	movs	r3, #5
 8001920:	e008      	b.n	8001934 <HAL_GPIO_Init+0x228>
 8001922:	2304      	movs	r3, #4
 8001924:	e006      	b.n	8001934 <HAL_GPIO_Init+0x228>
 8001926:	2303      	movs	r3, #3
 8001928:	e004      	b.n	8001934 <HAL_GPIO_Init+0x228>
 800192a:	2302      	movs	r3, #2
 800192c:	e002      	b.n	8001934 <HAL_GPIO_Init+0x228>
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <HAL_GPIO_Init+0x228>
 8001932:	2300      	movs	r3, #0
 8001934:	69fa      	ldr	r2, [r7, #28]
 8001936:	f002 0203 	and.w	r2, r2, #3
 800193a:	0092      	lsls	r2, r2, #2
 800193c:	4093      	lsls	r3, r2
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001944:	4934      	ldr	r1, [pc, #208]	; (8001a18 <HAL_GPIO_Init+0x30c>)
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	089b      	lsrs	r3, r3, #2
 800194a:	3302      	adds	r3, #2
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001952:	4b3a      	ldr	r3, [pc, #232]	; (8001a3c <HAL_GPIO_Init+0x330>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	43db      	mvns	r3, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4013      	ands	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001976:	4a31      	ldr	r2, [pc, #196]	; (8001a3c <HAL_GPIO_Init+0x330>)
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800197c:	4b2f      	ldr	r3, [pc, #188]	; (8001a3c <HAL_GPIO_Init+0x330>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	4313      	orrs	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019a0:	4a26      	ldr	r2, [pc, #152]	; (8001a3c <HAL_GPIO_Init+0x330>)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019a6:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <HAL_GPIO_Init+0x330>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ca:	4a1c      	ldr	r2, [pc, #112]	; (8001a3c <HAL_GPIO_Init+0x330>)
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019d0:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <HAL_GPIO_Init+0x330>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019f4:	4a11      	ldr	r2, [pc, #68]	; (8001a3c <HAL_GPIO_Init+0x330>)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3301      	adds	r3, #1
 80019fe:	61fb      	str	r3, [r7, #28]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	2b0f      	cmp	r3, #15
 8001a04:	f67f ae90 	bls.w	8001728 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a08:	bf00      	nop
 8001a0a:	3724      	adds	r7, #36	; 0x24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40013800 	.word	0x40013800
 8001a1c:	40020000 	.word	0x40020000
 8001a20:	40020400 	.word	0x40020400
 8001a24:	40020800 	.word	0x40020800
 8001a28:	40020c00 	.word	0x40020c00
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40021400 	.word	0x40021400
 8001a34:	40021800 	.word	0x40021800
 8001a38:	40021c00 	.word	0x40021c00
 8001a3c:	40013c00 	.word	0x40013c00

08001a40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691a      	ldr	r2, [r3, #16]
 8001a50:	887b      	ldrh	r3, [r7, #2]
 8001a52:	4013      	ands	r3, r2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d002      	beq.n	8001a5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	73fb      	strb	r3, [r7, #15]
 8001a5c:	e001      	b.n	8001a62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	807b      	strh	r3, [r7, #2]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a80:	787b      	ldrb	r3, [r7, #1]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a86:	887a      	ldrh	r2, [r7, #2]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a8c:	e003      	b.n	8001a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a8e:	887b      	ldrh	r3, [r7, #2]
 8001a90:	041a      	lsls	r2, r3, #16
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	619a      	str	r2, [r3, #24]
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695a      	ldr	r2, [r3, #20]
 8001ab2:	887b      	ldrh	r3, [r7, #2]
 8001ab4:	401a      	ands	r2, r3
 8001ab6:	887b      	ldrh	r3, [r7, #2]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d104      	bne.n	8001ac6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001abc:	887b      	ldrh	r3, [r7, #2]
 8001abe:	041a      	lsls	r2, r3, #16
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001ac4:	e002      	b.n	8001acc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001ac6:	887a      	ldrh	r2, [r7, #2]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	619a      	str	r2, [r3, #24]
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ae2:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ae4:	695a      	ldr	r2, [r3, #20]
 8001ae6:	88fb      	ldrh	r3, [r7, #6]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d006      	beq.n	8001afc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001aee:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001af4:	88fb      	ldrh	r3, [r7, #6]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 f806 	bl	8001b08 <HAL_GPIO_EXTI_Callback>
  }
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40013c00 	.word	0x40013c00

08001b08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e25b      	b.n	8001fea <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d075      	beq.n	8001c2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b3e:	4ba3      	ldr	r3, [pc, #652]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 030c 	and.w	r3, r3, #12
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d00c      	beq.n	8001b64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b4a:	4ba0      	ldr	r3, [pc, #640]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	d112      	bne.n	8001b7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b56:	4b9d      	ldr	r3, [pc, #628]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b62:	d10b      	bne.n	8001b7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b64:	4b99      	ldr	r3, [pc, #612]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d05b      	beq.n	8001c28 <HAL_RCC_OscConfig+0x108>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d157      	bne.n	8001c28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e236      	b.n	8001fea <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b84:	d106      	bne.n	8001b94 <HAL_RCC_OscConfig+0x74>
 8001b86:	4b91      	ldr	r3, [pc, #580]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a90      	ldr	r2, [pc, #576]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	e01d      	b.n	8001bd0 <HAL_RCC_OscConfig+0xb0>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b9c:	d10c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x98>
 8001b9e:	4b8b      	ldr	r3, [pc, #556]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a8a      	ldr	r2, [pc, #552]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	4b88      	ldr	r3, [pc, #544]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a87      	ldr	r2, [pc, #540]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	e00b      	b.n	8001bd0 <HAL_RCC_OscConfig+0xb0>
 8001bb8:	4b84      	ldr	r3, [pc, #528]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a83      	ldr	r2, [pc, #524]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	4b81      	ldr	r3, [pc, #516]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a80      	ldr	r2, [pc, #512]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d013      	beq.n	8001c00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd8:	f7ff f9f6 	bl	8000fc8 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001be0:	f7ff f9f2 	bl	8000fc8 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b64      	cmp	r3, #100	; 0x64
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e1fb      	b.n	8001fea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf2:	4b76      	ldr	r3, [pc, #472]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0f0      	beq.n	8001be0 <HAL_RCC_OscConfig+0xc0>
 8001bfe:	e014      	b.n	8001c2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7ff f9e2 	bl	8000fc8 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c08:	f7ff f9de 	bl	8000fc8 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b64      	cmp	r3, #100	; 0x64
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e1e7      	b.n	8001fea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1a:	4b6c      	ldr	r3, [pc, #432]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f0      	bne.n	8001c08 <HAL_RCC_OscConfig+0xe8>
 8001c26:	e000      	b.n	8001c2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d063      	beq.n	8001cfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c36:	4b65      	ldr	r3, [pc, #404]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00b      	beq.n	8001c5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c42:	4b62      	ldr	r3, [pc, #392]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c4a:	2b08      	cmp	r3, #8
 8001c4c:	d11c      	bne.n	8001c88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c4e:	4b5f      	ldr	r3, [pc, #380]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d116      	bne.n	8001c88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5a:	4b5c      	ldr	r3, [pc, #368]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d005      	beq.n	8001c72 <HAL_RCC_OscConfig+0x152>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d001      	beq.n	8001c72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e1bb      	b.n	8001fea <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c72:	4b56      	ldr	r3, [pc, #344]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	4952      	ldr	r1, [pc, #328]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c86:	e03a      	b.n	8001cfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d020      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c90:	4b4f      	ldr	r3, [pc, #316]	; (8001dd0 <HAL_RCC_OscConfig+0x2b0>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c96:	f7ff f997 	bl	8000fc8 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c9e:	f7ff f993 	bl	8000fc8 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e19c      	b.n	8001fea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb0:	4b46      	ldr	r3, [pc, #280]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cbc:	4b43      	ldr	r3, [pc, #268]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	4940      	ldr	r1, [pc, #256]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	600b      	str	r3, [r1, #0]
 8001cd0:	e015      	b.n	8001cfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cd2:	4b3f      	ldr	r3, [pc, #252]	; (8001dd0 <HAL_RCC_OscConfig+0x2b0>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7ff f976 	bl	8000fc8 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce0:	f7ff f972 	bl	8000fc8 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e17b      	b.n	8001fea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf2:	4b36      	ldr	r3, [pc, #216]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d030      	beq.n	8001d6c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d016      	beq.n	8001d40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d12:	4b30      	ldr	r3, [pc, #192]	; (8001dd4 <HAL_RCC_OscConfig+0x2b4>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d18:	f7ff f956 	bl	8000fc8 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d20:	f7ff f952 	bl	8000fc8 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e15b      	b.n	8001fea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d32:	4b26      	ldr	r3, [pc, #152]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCC_OscConfig+0x200>
 8001d3e:	e015      	b.n	8001d6c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d40:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <HAL_RCC_OscConfig+0x2b4>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d46:	f7ff f93f 	bl	8000fc8 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d4e:	f7ff f93b 	bl	8000fc8 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e144      	b.n	8001fea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d60:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1f0      	bne.n	8001d4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 80a0 	beq.w	8001eba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7e:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10f      	bne.n	8001daa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	4a0e      	ldr	r2, [pc, #56]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d98:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9a:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001da6:	2301      	movs	r3, #1
 8001da8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001daa:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_RCC_OscConfig+0x2b8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d121      	bne.n	8001dfa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001db6:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <HAL_RCC_OscConfig+0x2b8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a07      	ldr	r2, [pc, #28]	; (8001dd8 <HAL_RCC_OscConfig+0x2b8>)
 8001dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dc2:	f7ff f901 	bl	8000fc8 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc8:	e011      	b.n	8001dee <HAL_RCC_OscConfig+0x2ce>
 8001dca:	bf00      	nop
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	42470000 	.word	0x42470000
 8001dd4:	42470e80 	.word	0x42470e80
 8001dd8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ddc:	f7ff f8f4 	bl	8000fc8 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e0fd      	b.n	8001fea <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dee:	4b81      	ldr	r3, [pc, #516]	; (8001ff4 <HAL_RCC_OscConfig+0x4d4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d106      	bne.n	8001e10 <HAL_RCC_OscConfig+0x2f0>
 8001e02:	4b7d      	ldr	r3, [pc, #500]	; (8001ff8 <HAL_RCC_OscConfig+0x4d8>)
 8001e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e06:	4a7c      	ldr	r2, [pc, #496]	; (8001ff8 <HAL_RCC_OscConfig+0x4d8>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e0e:	e01c      	b.n	8001e4a <HAL_RCC_OscConfig+0x32a>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b05      	cmp	r3, #5
 8001e16:	d10c      	bne.n	8001e32 <HAL_RCC_OscConfig+0x312>
 8001e18:	4b77      	ldr	r3, [pc, #476]	; (8001ff8 <HAL_RCC_OscConfig+0x4d8>)
 8001e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1c:	4a76      	ldr	r2, [pc, #472]	; (8001ff8 <HAL_RCC_OscConfig+0x4d8>)
 8001e1e:	f043 0304 	orr.w	r3, r3, #4
 8001e22:	6713      	str	r3, [r2, #112]	; 0x70
 8001e24:	4b74      	ldr	r3, [pc, #464]	; (8001ff8 <HAL_RCC_OscConfig+0x4d8>)
 8001e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e28:	4a73      	ldr	r2, [pc, #460]	; (8001ff8 <HAL_RCC_OscConfig+0x4d8>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e30:	e00b      	b.n	8001e4a <HAL_RCC_OscConfig+0x32a>
 8001e32:	4b71      	ldr	r3, [pc, #452]	; (8001ff8 <HAL_RCC_OscConfig+0x4d8>)
 8001e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e36:	4a70      	ldr	r2, [pc, #448]	; (8001ff8 <HAL_RCC_OscConfig+0x4d8>)
 8001e38:	f023 0301 	bic.w	r3, r3, #1
 8001e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e3e:	4b6e      	ldr	r3, [pc, #440]	; (8001ff8 <HAL_RCC_OscConfig+0x4d8>)
 8001e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e42:	4a6d      	ldr	r2, [pc, #436]	; (8001ff8 <HAL_RCC_OscConfig+0x4d8>)
 8001e44:	f023 0304 	bic.w	r3, r3, #4
 8001e48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d015      	beq.n	8001e7e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e52:	f7ff f8b9 	bl	8000fc8 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e58:	e00a      	b.n	8001e70 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e5a:	f7ff f8b5 	bl	8000fc8 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e0bc      	b.n	8001fea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e70:	4b61      	ldr	r3, [pc, #388]	; (8001ff8 <HAL_RCC_OscConfig+0x4d8>)
 8001e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0ee      	beq.n	8001e5a <HAL_RCC_OscConfig+0x33a>
 8001e7c:	e014      	b.n	8001ea8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7e:	f7ff f8a3 	bl	8000fc8 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e84:	e00a      	b.n	8001e9c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e86:	f7ff f89f 	bl	8000fc8 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e0a6      	b.n	8001fea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e9c:	4b56      	ldr	r3, [pc, #344]	; (8001ff8 <HAL_RCC_OscConfig+0x4d8>)
 8001e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1ee      	bne.n	8001e86 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ea8:	7dfb      	ldrb	r3, [r7, #23]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d105      	bne.n	8001eba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eae:	4b52      	ldr	r3, [pc, #328]	; (8001ff8 <HAL_RCC_OscConfig+0x4d8>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	4a51      	ldr	r2, [pc, #324]	; (8001ff8 <HAL_RCC_OscConfig+0x4d8>)
 8001eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 8092 	beq.w	8001fe8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ec4:	4b4c      	ldr	r3, [pc, #304]	; (8001ff8 <HAL_RCC_OscConfig+0x4d8>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 030c 	and.w	r3, r3, #12
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d05c      	beq.n	8001f8a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d141      	bne.n	8001f5c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed8:	4b48      	ldr	r3, [pc, #288]	; (8001ffc <HAL_RCC_OscConfig+0x4dc>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ede:	f7ff f873 	bl	8000fc8 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee6:	f7ff f86f 	bl	8000fc8 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e078      	b.n	8001fea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef8:	4b3f      	ldr	r3, [pc, #252]	; (8001ff8 <HAL_RCC_OscConfig+0x4d8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1f0      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69da      	ldr	r2, [r3, #28]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	019b      	lsls	r3, r3, #6
 8001f14:	431a      	orrs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1a:	085b      	lsrs	r3, r3, #1
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	041b      	lsls	r3, r3, #16
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f26:	061b      	lsls	r3, r3, #24
 8001f28:	4933      	ldr	r1, [pc, #204]	; (8001ff8 <HAL_RCC_OscConfig+0x4d8>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f2e:	4b33      	ldr	r3, [pc, #204]	; (8001ffc <HAL_RCC_OscConfig+0x4dc>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7ff f848 	bl	8000fc8 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f3c:	f7ff f844 	bl	8000fc8 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e04d      	b.n	8001fea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f4e:	4b2a      	ldr	r3, [pc, #168]	; (8001ff8 <HAL_RCC_OscConfig+0x4d8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0x41c>
 8001f5a:	e045      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5c:	4b27      	ldr	r3, [pc, #156]	; (8001ffc <HAL_RCC_OscConfig+0x4dc>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f62:	f7ff f831 	bl	8000fc8 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f6a:	f7ff f82d 	bl	8000fc8 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e036      	b.n	8001fea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f7c:	4b1e      	ldr	r3, [pc, #120]	; (8001ff8 <HAL_RCC_OscConfig+0x4d8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f0      	bne.n	8001f6a <HAL_RCC_OscConfig+0x44a>
 8001f88:	e02e      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d101      	bne.n	8001f96 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e029      	b.n	8001fea <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f96:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <HAL_RCC_OscConfig+0x4d8>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d11c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d115      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d10d      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d106      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d001      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e000      	b.n	8001fea <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40007000 	.word	0x40007000
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	42470060 	.word	0x42470060

08002000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e0cc      	b.n	80021ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002014:	4b68      	ldr	r3, [pc, #416]	; (80021b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 030f 	and.w	r3, r3, #15
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d90c      	bls.n	800203c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002022:	4b65      	ldr	r3, [pc, #404]	; (80021b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800202a:	4b63      	ldr	r3, [pc, #396]	; (80021b8 <HAL_RCC_ClockConfig+0x1b8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d001      	beq.n	800203c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e0b8      	b.n	80021ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d020      	beq.n	800208a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	d005      	beq.n	8002060 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002054:	4b59      	ldr	r3, [pc, #356]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	4a58      	ldr	r2, [pc, #352]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800205e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	2b00      	cmp	r3, #0
 800206a:	d005      	beq.n	8002078 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800206c:	4b53      	ldr	r3, [pc, #332]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	4a52      	ldr	r2, [pc, #328]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002072:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002076:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002078:	4b50      	ldr	r3, [pc, #320]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	494d      	ldr	r1, [pc, #308]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002086:	4313      	orrs	r3, r2
 8002088:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d044      	beq.n	8002120 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d107      	bne.n	80020ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209e:	4b47      	ldr	r3, [pc, #284]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d119      	bne.n	80020de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e07f      	b.n	80021ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d003      	beq.n	80020be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	d107      	bne.n	80020ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020be:	4b3f      	ldr	r3, [pc, #252]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d109      	bne.n	80020de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e06f      	b.n	80021ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ce:	4b3b      	ldr	r3, [pc, #236]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e067      	b.n	80021ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020de:	4b37      	ldr	r3, [pc, #220]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f023 0203 	bic.w	r2, r3, #3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	4934      	ldr	r1, [pc, #208]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f0:	f7fe ff6a 	bl	8000fc8 <HAL_GetTick>
 80020f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f6:	e00a      	b.n	800210e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f8:	f7fe ff66 	bl	8000fc8 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	f241 3288 	movw	r2, #5000	; 0x1388
 8002106:	4293      	cmp	r3, r2
 8002108:	d901      	bls.n	800210e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e04f      	b.n	80021ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210e:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 020c 	and.w	r2, r3, #12
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	429a      	cmp	r2, r3
 800211e:	d1eb      	bne.n	80020f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002120:	4b25      	ldr	r3, [pc, #148]	; (80021b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 030f 	and.w	r3, r3, #15
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d20c      	bcs.n	8002148 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002136:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d001      	beq.n	8002148 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e032      	b.n	80021ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d008      	beq.n	8002166 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002154:	4b19      	ldr	r3, [pc, #100]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4916      	ldr	r1, [pc, #88]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	4313      	orrs	r3, r2
 8002164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d009      	beq.n	8002186 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002172:	4b12      	ldr	r3, [pc, #72]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	490e      	ldr	r1, [pc, #56]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002186:	f000 f821 	bl	80021cc <HAL_RCC_GetSysClockFreq>
 800218a:	4601      	mov	r1, r0
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	091b      	lsrs	r3, r3, #4
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	5cd3      	ldrb	r3, [r2, r3]
 800219a:	fa21 f303 	lsr.w	r3, r1, r3
 800219e:	4a09      	ldr	r2, [pc, #36]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 80021a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021a2:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe feca 	bl	8000f40 <HAL_InitTick>

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40023c00 	.word	0x40023c00
 80021bc:	40023800 	.word	0x40023800
 80021c0:	08003344 	.word	0x08003344
 80021c4:	20000000 	.word	0x20000000
 80021c8:	20000004 	.word	0x20000004

080021cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	2300      	movs	r3, #0
 80021dc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021e2:	4b63      	ldr	r3, [pc, #396]	; (8002370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 030c 	and.w	r3, r3, #12
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d007      	beq.n	80021fe <HAL_RCC_GetSysClockFreq+0x32>
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d008      	beq.n	8002204 <HAL_RCC_GetSysClockFreq+0x38>
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 80b4 	bne.w	8002360 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021f8:	4b5e      	ldr	r3, [pc, #376]	; (8002374 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80021fa:	60bb      	str	r3, [r7, #8]
       break;
 80021fc:	e0b3      	b.n	8002366 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021fe:	4b5d      	ldr	r3, [pc, #372]	; (8002374 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002200:	60bb      	str	r3, [r7, #8]
      break;
 8002202:	e0b0      	b.n	8002366 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002204:	4b5a      	ldr	r3, [pc, #360]	; (8002370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800220c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800220e:	4b58      	ldr	r3, [pc, #352]	; (8002370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d04a      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800221a:	4b55      	ldr	r3, [pc, #340]	; (8002370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	099b      	lsrs	r3, r3, #6
 8002220:	f04f 0400 	mov.w	r4, #0
 8002224:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	ea03 0501 	and.w	r5, r3, r1
 8002230:	ea04 0602 	and.w	r6, r4, r2
 8002234:	4629      	mov	r1, r5
 8002236:	4632      	mov	r2, r6
 8002238:	f04f 0300 	mov.w	r3, #0
 800223c:	f04f 0400 	mov.w	r4, #0
 8002240:	0154      	lsls	r4, r2, #5
 8002242:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002246:	014b      	lsls	r3, r1, #5
 8002248:	4619      	mov	r1, r3
 800224a:	4622      	mov	r2, r4
 800224c:	1b49      	subs	r1, r1, r5
 800224e:	eb62 0206 	sbc.w	r2, r2, r6
 8002252:	f04f 0300 	mov.w	r3, #0
 8002256:	f04f 0400 	mov.w	r4, #0
 800225a:	0194      	lsls	r4, r2, #6
 800225c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002260:	018b      	lsls	r3, r1, #6
 8002262:	1a5b      	subs	r3, r3, r1
 8002264:	eb64 0402 	sbc.w	r4, r4, r2
 8002268:	f04f 0100 	mov.w	r1, #0
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	00e2      	lsls	r2, r4, #3
 8002272:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002276:	00d9      	lsls	r1, r3, #3
 8002278:	460b      	mov	r3, r1
 800227a:	4614      	mov	r4, r2
 800227c:	195b      	adds	r3, r3, r5
 800227e:	eb44 0406 	adc.w	r4, r4, r6
 8002282:	f04f 0100 	mov.w	r1, #0
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	02a2      	lsls	r2, r4, #10
 800228c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002290:	0299      	lsls	r1, r3, #10
 8002292:	460b      	mov	r3, r1
 8002294:	4614      	mov	r4, r2
 8002296:	4618      	mov	r0, r3
 8002298:	4621      	mov	r1, r4
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f04f 0400 	mov.w	r4, #0
 80022a0:	461a      	mov	r2, r3
 80022a2:	4623      	mov	r3, r4
 80022a4:	f7fd ff90 	bl	80001c8 <__aeabi_uldivmod>
 80022a8:	4603      	mov	r3, r0
 80022aa:	460c      	mov	r4, r1
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	e049      	b.n	8002344 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022b0:	4b2f      	ldr	r3, [pc, #188]	; (8002370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	099b      	lsrs	r3, r3, #6
 80022b6:	f04f 0400 	mov.w	r4, #0
 80022ba:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	ea03 0501 	and.w	r5, r3, r1
 80022c6:	ea04 0602 	and.w	r6, r4, r2
 80022ca:	4629      	mov	r1, r5
 80022cc:	4632      	mov	r2, r6
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	f04f 0400 	mov.w	r4, #0
 80022d6:	0154      	lsls	r4, r2, #5
 80022d8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022dc:	014b      	lsls	r3, r1, #5
 80022de:	4619      	mov	r1, r3
 80022e0:	4622      	mov	r2, r4
 80022e2:	1b49      	subs	r1, r1, r5
 80022e4:	eb62 0206 	sbc.w	r2, r2, r6
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	f04f 0400 	mov.w	r4, #0
 80022f0:	0194      	lsls	r4, r2, #6
 80022f2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022f6:	018b      	lsls	r3, r1, #6
 80022f8:	1a5b      	subs	r3, r3, r1
 80022fa:	eb64 0402 	sbc.w	r4, r4, r2
 80022fe:	f04f 0100 	mov.w	r1, #0
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	00e2      	lsls	r2, r4, #3
 8002308:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800230c:	00d9      	lsls	r1, r3, #3
 800230e:	460b      	mov	r3, r1
 8002310:	4614      	mov	r4, r2
 8002312:	195b      	adds	r3, r3, r5
 8002314:	eb44 0406 	adc.w	r4, r4, r6
 8002318:	f04f 0100 	mov.w	r1, #0
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	02a2      	lsls	r2, r4, #10
 8002322:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002326:	0299      	lsls	r1, r3, #10
 8002328:	460b      	mov	r3, r1
 800232a:	4614      	mov	r4, r2
 800232c:	4618      	mov	r0, r3
 800232e:	4621      	mov	r1, r4
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f04f 0400 	mov.w	r4, #0
 8002336:	461a      	mov	r2, r3
 8002338:	4623      	mov	r3, r4
 800233a:	f7fd ff45 	bl	80001c8 <__aeabi_uldivmod>
 800233e:	4603      	mov	r3, r0
 8002340:	460c      	mov	r4, r1
 8002342:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002344:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	0c1b      	lsrs	r3, r3, #16
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	3301      	adds	r3, #1
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	fbb2 f3f3 	udiv	r3, r2, r3
 800235c:	60bb      	str	r3, [r7, #8]
      break;
 800235e:	e002      	b.n	8002366 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002360:	4b04      	ldr	r3, [pc, #16]	; (8002374 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002362:	60bb      	str	r3, [r7, #8]
      break;
 8002364:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002366:	68bb      	ldr	r3, [r7, #8]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002370:	40023800 	.word	0x40023800
 8002374:	00f42400 	.word	0x00f42400

08002378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800237c:	4b03      	ldr	r3, [pc, #12]	; (800238c <HAL_RCC_GetHCLKFreq+0x14>)
 800237e:	681b      	ldr	r3, [r3, #0]
}
 8002380:	4618      	mov	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000000 	.word	0x20000000

08002390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002394:	f7ff fff0 	bl	8002378 <HAL_RCC_GetHCLKFreq>
 8002398:	4601      	mov	r1, r0
 800239a:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	0a9b      	lsrs	r3, r3, #10
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	4a03      	ldr	r2, [pc, #12]	; (80023b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023a6:	5cd3      	ldrb	r3, [r2, r3]
 80023a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40023800 	.word	0x40023800
 80023b4:	08003354 	.word	0x08003354

080023b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023bc:	f7ff ffdc 	bl	8002378 <HAL_RCC_GetHCLKFreq>
 80023c0:	4601      	mov	r1, r0
 80023c2:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	0b5b      	lsrs	r3, r3, #13
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	4a03      	ldr	r2, [pc, #12]	; (80023dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ce:	5cd3      	ldrb	r3, [r2, r3]
 80023d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40023800 	.word	0x40023800
 80023dc:	08003354 	.word	0x08003354

080023e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e056      	b.n	80024a0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	d106      	bne.n	8002412 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7fe fc4d 	bl	8000cac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2202      	movs	r2, #2
 8002416:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002428:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	431a      	orrs	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	ea42 0103 	orr.w	r1, r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	0c1b      	lsrs	r3, r3, #16
 8002470:	f003 0104 	and.w	r1, r3, #4
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	69da      	ldr	r2, [r3, #28]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800248e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	4613      	mov	r3, r2
 80024b6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <HAL_SPI_Transmit+0x22>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e11e      	b.n	8002708 <HAL_SPI_Transmit+0x260>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024d2:	f7fe fd79 	bl	8000fc8 <HAL_GetTick>
 80024d6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80024d8:	88fb      	ldrh	r3, [r7, #6]
 80024da:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d002      	beq.n	80024ee <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80024e8:	2302      	movs	r3, #2
 80024ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024ec:	e103      	b.n	80026f6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d002      	beq.n	80024fa <HAL_SPI_Transmit+0x52>
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d102      	bne.n	8002500 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024fe:	e0fa      	b.n	80026f6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2203      	movs	r2, #3
 8002504:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	88fa      	ldrh	r2, [r7, #6]
 8002518:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	88fa      	ldrh	r2, [r7, #6]
 800251e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002546:	d107      	bne.n	8002558 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002556:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002562:	2b40      	cmp	r3, #64	; 0x40
 8002564:	d007      	beq.n	8002576 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002574:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800257e:	d14b      	bne.n	8002618 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <HAL_SPI_Transmit+0xe6>
 8002588:	8afb      	ldrh	r3, [r7, #22]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d13e      	bne.n	800260c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	881a      	ldrh	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	1c9a      	adds	r2, r3, #2
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025b2:	e02b      	b.n	800260c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d112      	bne.n	80025e8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	881a      	ldrh	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	1c9a      	adds	r2, r3, #2
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025dc:	b29b      	uxth	r3, r3
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	86da      	strh	r2, [r3, #54]	; 0x36
 80025e6:	e011      	b.n	800260c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025e8:	f7fe fcee 	bl	8000fc8 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d803      	bhi.n	8002600 <HAL_SPI_Transmit+0x158>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fe:	d102      	bne.n	8002606 <HAL_SPI_Transmit+0x15e>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d102      	bne.n	800260c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	77fb      	strb	r3, [r7, #31]
          goto error;
 800260a:	e074      	b.n	80026f6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002610:	b29b      	uxth	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1ce      	bne.n	80025b4 <HAL_SPI_Transmit+0x10c>
 8002616:	e04c      	b.n	80026b2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d002      	beq.n	8002626 <HAL_SPI_Transmit+0x17e>
 8002620:	8afb      	ldrh	r3, [r7, #22]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d140      	bne.n	80026a8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	330c      	adds	r3, #12
 8002630:	7812      	ldrb	r2, [r2, #0]
 8002632:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002642:	b29b      	uxth	r3, r3
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800264c:	e02c      	b.n	80026a8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b02      	cmp	r3, #2
 800265a:	d113      	bne.n	8002684 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	330c      	adds	r3, #12
 8002666:	7812      	ldrb	r2, [r2, #0]
 8002668:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002678:	b29b      	uxth	r3, r3
 800267a:	3b01      	subs	r3, #1
 800267c:	b29a      	uxth	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	86da      	strh	r2, [r3, #54]	; 0x36
 8002682:	e011      	b.n	80026a8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002684:	f7fe fca0 	bl	8000fc8 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d803      	bhi.n	800269c <HAL_SPI_Transmit+0x1f4>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269a:	d102      	bne.n	80026a2 <HAL_SPI_Transmit+0x1fa>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d102      	bne.n	80026a8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026a6:	e026      	b.n	80026f6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1cd      	bne.n	800264e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	6839      	ldr	r1, [r7, #0]
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 f894 	bl	80027e4 <SPI_EndRxTxTransaction>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d002      	beq.n	80026c8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2220      	movs	r2, #32
 80026c6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10a      	bne.n	80026e6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026d0:	2300      	movs	r3, #0
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	77fb      	strb	r3, [r7, #31]
 80026f2:	e000      	b.n	80026f6 <HAL_SPI_Transmit+0x24e>
  }

error:
 80026f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002706:	7ffb      	ldrb	r3, [r7, #31]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3720      	adds	r7, #32
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	603b      	str	r3, [r7, #0]
 800271c:	4613      	mov	r3, r2
 800271e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002720:	e04c      	b.n	80027bc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002728:	d048      	beq.n	80027bc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800272a:	f7fe fc4d 	bl	8000fc8 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d902      	bls.n	8002740 <SPI_WaitFlagStateUntilTimeout+0x30>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d13d      	bne.n	80027bc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800274e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002758:	d111      	bne.n	800277e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002762:	d004      	beq.n	800276e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800276c:	d107      	bne.n	800277e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800277c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002786:	d10f      	bne.n	80027a8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e00f      	b.n	80027dc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	4013      	ands	r3, r2
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	bf0c      	ite	eq
 80027cc:	2301      	moveq	r3, #1
 80027ce:	2300      	movne	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d1a3      	bne.n	8002722 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af02      	add	r7, sp, #8
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80027f0:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <SPI_EndRxTxTransaction+0x7c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a1b      	ldr	r2, [pc, #108]	; (8002864 <SPI_EndRxTxTransaction+0x80>)
 80027f6:	fba2 2303 	umull	r2, r3, r2, r3
 80027fa:	0d5b      	lsrs	r3, r3, #21
 80027fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002800:	fb02 f303 	mul.w	r3, r2, r3
 8002804:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800280e:	d112      	bne.n	8002836 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2200      	movs	r2, #0
 8002818:	2180      	movs	r1, #128	; 0x80
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f7ff ff78 	bl	8002710 <SPI_WaitFlagStateUntilTimeout>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d016      	beq.n	8002854 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282a:	f043 0220 	orr.w	r2, r3, #32
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e00f      	b.n	8002856 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00a      	beq.n	8002852 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	3b01      	subs	r3, #1
 8002840:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284c:	2b80      	cmp	r3, #128	; 0x80
 800284e:	d0f2      	beq.n	8002836 <SPI_EndRxTxTransaction+0x52>
 8002850:	e000      	b.n	8002854 <SPI_EndRxTxTransaction+0x70>
        break;
 8002852:	bf00      	nop
  }

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20000000 	.word	0x20000000
 8002864:	165e9f81 	.word	0x165e9f81

08002868 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e01d      	b.n	80028b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d106      	bne.n	8002894 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7fe fa54 	bl	8000d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3304      	adds	r3, #4
 80028a4:	4619      	mov	r1, r3
 80028a6:	4610      	mov	r0, r2
 80028a8:	f000 f82e 	bl	8002908 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80028be:	b480      	push	{r7}
 80028c0:	b085      	sub	sp, #20
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2202      	movs	r2, #2
 80028ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2b06      	cmp	r3, #6
 80028de:	d007      	beq.n	80028f0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0201 	orr.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
	...

08002908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a40      	ldr	r2, [pc, #256]	; (8002a1c <TIM_Base_SetConfig+0x114>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d013      	beq.n	8002948 <TIM_Base_SetConfig+0x40>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002926:	d00f      	beq.n	8002948 <TIM_Base_SetConfig+0x40>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a3d      	ldr	r2, [pc, #244]	; (8002a20 <TIM_Base_SetConfig+0x118>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d00b      	beq.n	8002948 <TIM_Base_SetConfig+0x40>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a3c      	ldr	r2, [pc, #240]	; (8002a24 <TIM_Base_SetConfig+0x11c>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d007      	beq.n	8002948 <TIM_Base_SetConfig+0x40>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a3b      	ldr	r2, [pc, #236]	; (8002a28 <TIM_Base_SetConfig+0x120>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d003      	beq.n	8002948 <TIM_Base_SetConfig+0x40>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a3a      	ldr	r2, [pc, #232]	; (8002a2c <TIM_Base_SetConfig+0x124>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d108      	bne.n	800295a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4313      	orrs	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a2f      	ldr	r2, [pc, #188]	; (8002a1c <TIM_Base_SetConfig+0x114>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d02b      	beq.n	80029ba <TIM_Base_SetConfig+0xb2>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002968:	d027      	beq.n	80029ba <TIM_Base_SetConfig+0xb2>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a2c      	ldr	r2, [pc, #176]	; (8002a20 <TIM_Base_SetConfig+0x118>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d023      	beq.n	80029ba <TIM_Base_SetConfig+0xb2>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a2b      	ldr	r2, [pc, #172]	; (8002a24 <TIM_Base_SetConfig+0x11c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d01f      	beq.n	80029ba <TIM_Base_SetConfig+0xb2>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a2a      	ldr	r2, [pc, #168]	; (8002a28 <TIM_Base_SetConfig+0x120>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d01b      	beq.n	80029ba <TIM_Base_SetConfig+0xb2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a29      	ldr	r2, [pc, #164]	; (8002a2c <TIM_Base_SetConfig+0x124>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d017      	beq.n	80029ba <TIM_Base_SetConfig+0xb2>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a28      	ldr	r2, [pc, #160]	; (8002a30 <TIM_Base_SetConfig+0x128>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d013      	beq.n	80029ba <TIM_Base_SetConfig+0xb2>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a27      	ldr	r2, [pc, #156]	; (8002a34 <TIM_Base_SetConfig+0x12c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d00f      	beq.n	80029ba <TIM_Base_SetConfig+0xb2>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a26      	ldr	r2, [pc, #152]	; (8002a38 <TIM_Base_SetConfig+0x130>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d00b      	beq.n	80029ba <TIM_Base_SetConfig+0xb2>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a25      	ldr	r2, [pc, #148]	; (8002a3c <TIM_Base_SetConfig+0x134>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d007      	beq.n	80029ba <TIM_Base_SetConfig+0xb2>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a24      	ldr	r2, [pc, #144]	; (8002a40 <TIM_Base_SetConfig+0x138>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d003      	beq.n	80029ba <TIM_Base_SetConfig+0xb2>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a23      	ldr	r2, [pc, #140]	; (8002a44 <TIM_Base_SetConfig+0x13c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d108      	bne.n	80029cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a0a      	ldr	r2, [pc, #40]	; (8002a1c <TIM_Base_SetConfig+0x114>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d003      	beq.n	8002a00 <TIM_Base_SetConfig+0xf8>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a0c      	ldr	r2, [pc, #48]	; (8002a2c <TIM_Base_SetConfig+0x124>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d103      	bne.n	8002a08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	691a      	ldr	r2, [r3, #16]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	615a      	str	r2, [r3, #20]
}
 8002a0e:	bf00      	nop
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40010000 	.word	0x40010000
 8002a20:	40000400 	.word	0x40000400
 8002a24:	40000800 	.word	0x40000800
 8002a28:	40000c00 	.word	0x40000c00
 8002a2c:	40010400 	.word	0x40010400
 8002a30:	40014000 	.word	0x40014000
 8002a34:	40014400 	.word	0x40014400
 8002a38:	40014800 	.word	0x40014800
 8002a3c:	40001800 	.word	0x40001800
 8002a40:	40001c00 	.word	0x40001c00
 8002a44:	40002000 	.word	0x40002000

08002a48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e05a      	b.n	8002b16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a21      	ldr	r2, [pc, #132]	; (8002b24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d022      	beq.n	8002aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aac:	d01d      	beq.n	8002aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d018      	beq.n	8002aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a1b      	ldr	r2, [pc, #108]	; (8002b2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d013      	beq.n	8002aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a1a      	ldr	r2, [pc, #104]	; (8002b30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d00e      	beq.n	8002aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a18      	ldr	r2, [pc, #96]	; (8002b34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d009      	beq.n	8002aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a17      	ldr	r2, [pc, #92]	; (8002b38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d004      	beq.n	8002aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a15      	ldr	r2, [pc, #84]	; (8002b3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d10c      	bne.n	8002b04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002af0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40010000 	.word	0x40010000
 8002b28:	40000400 	.word	0x40000400
 8002b2c:	40000800 	.word	0x40000800
 8002b30:	40000c00 	.word	0x40000c00
 8002b34:	40010400 	.word	0x40010400
 8002b38:	40014000 	.word	0x40014000
 8002b3c:	40001800 	.word	0x40001800

08002b40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e03f      	b.n	8002bd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d106      	bne.n	8002b6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7fe f90a 	bl	8000d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2224      	movs	r2, #36	; 0x24
 8002b70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f829 	bl	8002bdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695a      	ldr	r2, [r3, #20]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ba8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002be0:	b085      	sub	sp, #20
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	431a      	orrs	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002c1e:	f023 030c 	bic.w	r3, r3, #12
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6812      	ldr	r2, [r2, #0]
 8002c26:	68f9      	ldr	r1, [r7, #12]
 8002c28:	430b      	orrs	r3, r1
 8002c2a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699a      	ldr	r2, [r3, #24]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c4a:	f040 818b 	bne.w	8002f64 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4ac1      	ldr	r2, [pc, #772]	; (8002f58 <UART_SetConfig+0x37c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d005      	beq.n	8002c64 <UART_SetConfig+0x88>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4abf      	ldr	r2, [pc, #764]	; (8002f5c <UART_SetConfig+0x380>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	f040 80bd 	bne.w	8002dde <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c64:	f7ff fba8 	bl	80023b8 <HAL_RCC_GetPCLK2Freq>
 8002c68:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	461d      	mov	r5, r3
 8002c6e:	f04f 0600 	mov.w	r6, #0
 8002c72:	46a8      	mov	r8, r5
 8002c74:	46b1      	mov	r9, r6
 8002c76:	eb18 0308 	adds.w	r3, r8, r8
 8002c7a:	eb49 0409 	adc.w	r4, r9, r9
 8002c7e:	4698      	mov	r8, r3
 8002c80:	46a1      	mov	r9, r4
 8002c82:	eb18 0805 	adds.w	r8, r8, r5
 8002c86:	eb49 0906 	adc.w	r9, r9, r6
 8002c8a:	f04f 0100 	mov.w	r1, #0
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c96:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c9a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002c9e:	4688      	mov	r8, r1
 8002ca0:	4691      	mov	r9, r2
 8002ca2:	eb18 0005 	adds.w	r0, r8, r5
 8002ca6:	eb49 0106 	adc.w	r1, r9, r6
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	461d      	mov	r5, r3
 8002cb0:	f04f 0600 	mov.w	r6, #0
 8002cb4:	196b      	adds	r3, r5, r5
 8002cb6:	eb46 0406 	adc.w	r4, r6, r6
 8002cba:	461a      	mov	r2, r3
 8002cbc:	4623      	mov	r3, r4
 8002cbe:	f7fd fa83 	bl	80001c8 <__aeabi_uldivmod>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	460c      	mov	r4, r1
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	4ba5      	ldr	r3, [pc, #660]	; (8002f60 <UART_SetConfig+0x384>)
 8002cca:	fba3 2302 	umull	r2, r3, r3, r2
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	461d      	mov	r5, r3
 8002cd8:	f04f 0600 	mov.w	r6, #0
 8002cdc:	46a9      	mov	r9, r5
 8002cde:	46b2      	mov	sl, r6
 8002ce0:	eb19 0309 	adds.w	r3, r9, r9
 8002ce4:	eb4a 040a 	adc.w	r4, sl, sl
 8002ce8:	4699      	mov	r9, r3
 8002cea:	46a2      	mov	sl, r4
 8002cec:	eb19 0905 	adds.w	r9, r9, r5
 8002cf0:	eb4a 0a06 	adc.w	sl, sl, r6
 8002cf4:	f04f 0100 	mov.w	r1, #0
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d08:	4689      	mov	r9, r1
 8002d0a:	4692      	mov	sl, r2
 8002d0c:	eb19 0005 	adds.w	r0, r9, r5
 8002d10:	eb4a 0106 	adc.w	r1, sl, r6
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	461d      	mov	r5, r3
 8002d1a:	f04f 0600 	mov.w	r6, #0
 8002d1e:	196b      	adds	r3, r5, r5
 8002d20:	eb46 0406 	adc.w	r4, r6, r6
 8002d24:	461a      	mov	r2, r3
 8002d26:	4623      	mov	r3, r4
 8002d28:	f7fd fa4e 	bl	80001c8 <__aeabi_uldivmod>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	460c      	mov	r4, r1
 8002d30:	461a      	mov	r2, r3
 8002d32:	4b8b      	ldr	r3, [pc, #556]	; (8002f60 <UART_SetConfig+0x384>)
 8002d34:	fba3 1302 	umull	r1, r3, r3, r2
 8002d38:	095b      	lsrs	r3, r3, #5
 8002d3a:	2164      	movs	r1, #100	; 0x64
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	3332      	adds	r3, #50	; 0x32
 8002d46:	4a86      	ldr	r2, [pc, #536]	; (8002f60 <UART_SetConfig+0x384>)
 8002d48:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4c:	095b      	lsrs	r3, r3, #5
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d54:	4498      	add	r8, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	461d      	mov	r5, r3
 8002d5a:	f04f 0600 	mov.w	r6, #0
 8002d5e:	46a9      	mov	r9, r5
 8002d60:	46b2      	mov	sl, r6
 8002d62:	eb19 0309 	adds.w	r3, r9, r9
 8002d66:	eb4a 040a 	adc.w	r4, sl, sl
 8002d6a:	4699      	mov	r9, r3
 8002d6c:	46a2      	mov	sl, r4
 8002d6e:	eb19 0905 	adds.w	r9, r9, r5
 8002d72:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d76:	f04f 0100 	mov.w	r1, #0
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d8a:	4689      	mov	r9, r1
 8002d8c:	4692      	mov	sl, r2
 8002d8e:	eb19 0005 	adds.w	r0, r9, r5
 8002d92:	eb4a 0106 	adc.w	r1, sl, r6
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	461d      	mov	r5, r3
 8002d9c:	f04f 0600 	mov.w	r6, #0
 8002da0:	196b      	adds	r3, r5, r5
 8002da2:	eb46 0406 	adc.w	r4, r6, r6
 8002da6:	461a      	mov	r2, r3
 8002da8:	4623      	mov	r3, r4
 8002daa:	f7fd fa0d 	bl	80001c8 <__aeabi_uldivmod>
 8002dae:	4603      	mov	r3, r0
 8002db0:	460c      	mov	r4, r1
 8002db2:	461a      	mov	r2, r3
 8002db4:	4b6a      	ldr	r3, [pc, #424]	; (8002f60 <UART_SetConfig+0x384>)
 8002db6:	fba3 1302 	umull	r1, r3, r3, r2
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	2164      	movs	r1, #100	; 0x64
 8002dbe:	fb01 f303 	mul.w	r3, r1, r3
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	3332      	adds	r3, #50	; 0x32
 8002dc8:	4a65      	ldr	r2, [pc, #404]	; (8002f60 <UART_SetConfig+0x384>)
 8002dca:	fba2 2303 	umull	r2, r3, r2, r3
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	f003 0207 	and.w	r2, r3, #7
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4442      	add	r2, r8
 8002dda:	609a      	str	r2, [r3, #8]
 8002ddc:	e26f      	b.n	80032be <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002dde:	f7ff fad7 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 8002de2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	461d      	mov	r5, r3
 8002de8:	f04f 0600 	mov.w	r6, #0
 8002dec:	46a8      	mov	r8, r5
 8002dee:	46b1      	mov	r9, r6
 8002df0:	eb18 0308 	adds.w	r3, r8, r8
 8002df4:	eb49 0409 	adc.w	r4, r9, r9
 8002df8:	4698      	mov	r8, r3
 8002dfa:	46a1      	mov	r9, r4
 8002dfc:	eb18 0805 	adds.w	r8, r8, r5
 8002e00:	eb49 0906 	adc.w	r9, r9, r6
 8002e04:	f04f 0100 	mov.w	r1, #0
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e10:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e14:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e18:	4688      	mov	r8, r1
 8002e1a:	4691      	mov	r9, r2
 8002e1c:	eb18 0005 	adds.w	r0, r8, r5
 8002e20:	eb49 0106 	adc.w	r1, r9, r6
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	461d      	mov	r5, r3
 8002e2a:	f04f 0600 	mov.w	r6, #0
 8002e2e:	196b      	adds	r3, r5, r5
 8002e30:	eb46 0406 	adc.w	r4, r6, r6
 8002e34:	461a      	mov	r2, r3
 8002e36:	4623      	mov	r3, r4
 8002e38:	f7fd f9c6 	bl	80001c8 <__aeabi_uldivmod>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	460c      	mov	r4, r1
 8002e40:	461a      	mov	r2, r3
 8002e42:	4b47      	ldr	r3, [pc, #284]	; (8002f60 <UART_SetConfig+0x384>)
 8002e44:	fba3 2302 	umull	r2, r3, r3, r2
 8002e48:	095b      	lsrs	r3, r3, #5
 8002e4a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	461d      	mov	r5, r3
 8002e52:	f04f 0600 	mov.w	r6, #0
 8002e56:	46a9      	mov	r9, r5
 8002e58:	46b2      	mov	sl, r6
 8002e5a:	eb19 0309 	adds.w	r3, r9, r9
 8002e5e:	eb4a 040a 	adc.w	r4, sl, sl
 8002e62:	4699      	mov	r9, r3
 8002e64:	46a2      	mov	sl, r4
 8002e66:	eb19 0905 	adds.w	r9, r9, r5
 8002e6a:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e6e:	f04f 0100 	mov.w	r1, #0
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e82:	4689      	mov	r9, r1
 8002e84:	4692      	mov	sl, r2
 8002e86:	eb19 0005 	adds.w	r0, r9, r5
 8002e8a:	eb4a 0106 	adc.w	r1, sl, r6
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	461d      	mov	r5, r3
 8002e94:	f04f 0600 	mov.w	r6, #0
 8002e98:	196b      	adds	r3, r5, r5
 8002e9a:	eb46 0406 	adc.w	r4, r6, r6
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4623      	mov	r3, r4
 8002ea2:	f7fd f991 	bl	80001c8 <__aeabi_uldivmod>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	460c      	mov	r4, r1
 8002eaa:	461a      	mov	r2, r3
 8002eac:	4b2c      	ldr	r3, [pc, #176]	; (8002f60 <UART_SetConfig+0x384>)
 8002eae:	fba3 1302 	umull	r1, r3, r3, r2
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	2164      	movs	r1, #100	; 0x64
 8002eb6:	fb01 f303 	mul.w	r3, r1, r3
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	3332      	adds	r3, #50	; 0x32
 8002ec0:	4a27      	ldr	r2, [pc, #156]	; (8002f60 <UART_SetConfig+0x384>)
 8002ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ece:	4498      	add	r8, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	461d      	mov	r5, r3
 8002ed4:	f04f 0600 	mov.w	r6, #0
 8002ed8:	46a9      	mov	r9, r5
 8002eda:	46b2      	mov	sl, r6
 8002edc:	eb19 0309 	adds.w	r3, r9, r9
 8002ee0:	eb4a 040a 	adc.w	r4, sl, sl
 8002ee4:	4699      	mov	r9, r3
 8002ee6:	46a2      	mov	sl, r4
 8002ee8:	eb19 0905 	adds.w	r9, r9, r5
 8002eec:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ef0:	f04f 0100 	mov.w	r1, #0
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002efc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f04:	4689      	mov	r9, r1
 8002f06:	4692      	mov	sl, r2
 8002f08:	eb19 0005 	adds.w	r0, r9, r5
 8002f0c:	eb4a 0106 	adc.w	r1, sl, r6
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	461d      	mov	r5, r3
 8002f16:	f04f 0600 	mov.w	r6, #0
 8002f1a:	196b      	adds	r3, r5, r5
 8002f1c:	eb46 0406 	adc.w	r4, r6, r6
 8002f20:	461a      	mov	r2, r3
 8002f22:	4623      	mov	r3, r4
 8002f24:	f7fd f950 	bl	80001c8 <__aeabi_uldivmod>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	460c      	mov	r4, r1
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <UART_SetConfig+0x384>)
 8002f30:	fba3 1302 	umull	r1, r3, r3, r2
 8002f34:	095b      	lsrs	r3, r3, #5
 8002f36:	2164      	movs	r1, #100	; 0x64
 8002f38:	fb01 f303 	mul.w	r3, r1, r3
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	3332      	adds	r3, #50	; 0x32
 8002f42:	4a07      	ldr	r2, [pc, #28]	; (8002f60 <UART_SetConfig+0x384>)
 8002f44:	fba2 2303 	umull	r2, r3, r2, r3
 8002f48:	095b      	lsrs	r3, r3, #5
 8002f4a:	f003 0207 	and.w	r2, r3, #7
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4442      	add	r2, r8
 8002f54:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002f56:	e1b2      	b.n	80032be <UART_SetConfig+0x6e2>
 8002f58:	40011000 	.word	0x40011000
 8002f5c:	40011400 	.word	0x40011400
 8002f60:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4ad7      	ldr	r2, [pc, #860]	; (80032c8 <UART_SetConfig+0x6ec>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d005      	beq.n	8002f7a <UART_SetConfig+0x39e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4ad6      	ldr	r2, [pc, #856]	; (80032cc <UART_SetConfig+0x6f0>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	f040 80d1 	bne.w	800311c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f7a:	f7ff fa1d 	bl	80023b8 <HAL_RCC_GetPCLK2Freq>
 8002f7e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	469a      	mov	sl, r3
 8002f84:	f04f 0b00 	mov.w	fp, #0
 8002f88:	46d0      	mov	r8, sl
 8002f8a:	46d9      	mov	r9, fp
 8002f8c:	eb18 0308 	adds.w	r3, r8, r8
 8002f90:	eb49 0409 	adc.w	r4, r9, r9
 8002f94:	4698      	mov	r8, r3
 8002f96:	46a1      	mov	r9, r4
 8002f98:	eb18 080a 	adds.w	r8, r8, sl
 8002f9c:	eb49 090b 	adc.w	r9, r9, fp
 8002fa0:	f04f 0100 	mov.w	r1, #0
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002fac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002fb0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002fb4:	4688      	mov	r8, r1
 8002fb6:	4691      	mov	r9, r2
 8002fb8:	eb1a 0508 	adds.w	r5, sl, r8
 8002fbc:	eb4b 0609 	adc.w	r6, fp, r9
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	f04f 0400 	mov.w	r4, #0
 8002fd2:	0094      	lsls	r4, r2, #2
 8002fd4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002fd8:	008b      	lsls	r3, r1, #2
 8002fda:	461a      	mov	r2, r3
 8002fdc:	4623      	mov	r3, r4
 8002fde:	4628      	mov	r0, r5
 8002fe0:	4631      	mov	r1, r6
 8002fe2:	f7fd f8f1 	bl	80001c8 <__aeabi_uldivmod>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	460c      	mov	r4, r1
 8002fea:	461a      	mov	r2, r3
 8002fec:	4bb8      	ldr	r3, [pc, #736]	; (80032d0 <UART_SetConfig+0x6f4>)
 8002fee:	fba3 2302 	umull	r2, r3, r3, r2
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	469b      	mov	fp, r3
 8002ffc:	f04f 0c00 	mov.w	ip, #0
 8003000:	46d9      	mov	r9, fp
 8003002:	46e2      	mov	sl, ip
 8003004:	eb19 0309 	adds.w	r3, r9, r9
 8003008:	eb4a 040a 	adc.w	r4, sl, sl
 800300c:	4699      	mov	r9, r3
 800300e:	46a2      	mov	sl, r4
 8003010:	eb19 090b 	adds.w	r9, r9, fp
 8003014:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003018:	f04f 0100 	mov.w	r1, #0
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003024:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003028:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800302c:	4689      	mov	r9, r1
 800302e:	4692      	mov	sl, r2
 8003030:	eb1b 0509 	adds.w	r5, fp, r9
 8003034:	eb4c 060a 	adc.w	r6, ip, sl
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	4619      	mov	r1, r3
 800303e:	f04f 0200 	mov.w	r2, #0
 8003042:	f04f 0300 	mov.w	r3, #0
 8003046:	f04f 0400 	mov.w	r4, #0
 800304a:	0094      	lsls	r4, r2, #2
 800304c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003050:	008b      	lsls	r3, r1, #2
 8003052:	461a      	mov	r2, r3
 8003054:	4623      	mov	r3, r4
 8003056:	4628      	mov	r0, r5
 8003058:	4631      	mov	r1, r6
 800305a:	f7fd f8b5 	bl	80001c8 <__aeabi_uldivmod>
 800305e:	4603      	mov	r3, r0
 8003060:	460c      	mov	r4, r1
 8003062:	461a      	mov	r2, r3
 8003064:	4b9a      	ldr	r3, [pc, #616]	; (80032d0 <UART_SetConfig+0x6f4>)
 8003066:	fba3 1302 	umull	r1, r3, r3, r2
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	2164      	movs	r1, #100	; 0x64
 800306e:	fb01 f303 	mul.w	r3, r1, r3
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	3332      	adds	r3, #50	; 0x32
 8003078:	4a95      	ldr	r2, [pc, #596]	; (80032d0 <UART_SetConfig+0x6f4>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	095b      	lsrs	r3, r3, #5
 8003080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003084:	4498      	add	r8, r3
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	469b      	mov	fp, r3
 800308a:	f04f 0c00 	mov.w	ip, #0
 800308e:	46d9      	mov	r9, fp
 8003090:	46e2      	mov	sl, ip
 8003092:	eb19 0309 	adds.w	r3, r9, r9
 8003096:	eb4a 040a 	adc.w	r4, sl, sl
 800309a:	4699      	mov	r9, r3
 800309c:	46a2      	mov	sl, r4
 800309e:	eb19 090b 	adds.w	r9, r9, fp
 80030a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80030a6:	f04f 0100 	mov.w	r1, #0
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030ba:	4689      	mov	r9, r1
 80030bc:	4692      	mov	sl, r2
 80030be:	eb1b 0509 	adds.w	r5, fp, r9
 80030c2:	eb4c 060a 	adc.w	r6, ip, sl
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	4619      	mov	r1, r3
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	f04f 0400 	mov.w	r4, #0
 80030d8:	0094      	lsls	r4, r2, #2
 80030da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030de:	008b      	lsls	r3, r1, #2
 80030e0:	461a      	mov	r2, r3
 80030e2:	4623      	mov	r3, r4
 80030e4:	4628      	mov	r0, r5
 80030e6:	4631      	mov	r1, r6
 80030e8:	f7fd f86e 	bl	80001c8 <__aeabi_uldivmod>
 80030ec:	4603      	mov	r3, r0
 80030ee:	460c      	mov	r4, r1
 80030f0:	461a      	mov	r2, r3
 80030f2:	4b77      	ldr	r3, [pc, #476]	; (80032d0 <UART_SetConfig+0x6f4>)
 80030f4:	fba3 1302 	umull	r1, r3, r3, r2
 80030f8:	095b      	lsrs	r3, r3, #5
 80030fa:	2164      	movs	r1, #100	; 0x64
 80030fc:	fb01 f303 	mul.w	r3, r1, r3
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	011b      	lsls	r3, r3, #4
 8003104:	3332      	adds	r3, #50	; 0x32
 8003106:	4a72      	ldr	r2, [pc, #456]	; (80032d0 <UART_SetConfig+0x6f4>)
 8003108:	fba2 2303 	umull	r2, r3, r2, r3
 800310c:	095b      	lsrs	r3, r3, #5
 800310e:	f003 020f 	and.w	r2, r3, #15
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4442      	add	r2, r8
 8003118:	609a      	str	r2, [r3, #8]
 800311a:	e0d0      	b.n	80032be <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800311c:	f7ff f938 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 8003120:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	469a      	mov	sl, r3
 8003126:	f04f 0b00 	mov.w	fp, #0
 800312a:	46d0      	mov	r8, sl
 800312c:	46d9      	mov	r9, fp
 800312e:	eb18 0308 	adds.w	r3, r8, r8
 8003132:	eb49 0409 	adc.w	r4, r9, r9
 8003136:	4698      	mov	r8, r3
 8003138:	46a1      	mov	r9, r4
 800313a:	eb18 080a 	adds.w	r8, r8, sl
 800313e:	eb49 090b 	adc.w	r9, r9, fp
 8003142:	f04f 0100 	mov.w	r1, #0
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800314e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003152:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003156:	4688      	mov	r8, r1
 8003158:	4691      	mov	r9, r2
 800315a:	eb1a 0508 	adds.w	r5, sl, r8
 800315e:	eb4b 0609 	adc.w	r6, fp, r9
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	4619      	mov	r1, r3
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	f04f 0300 	mov.w	r3, #0
 8003170:	f04f 0400 	mov.w	r4, #0
 8003174:	0094      	lsls	r4, r2, #2
 8003176:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800317a:	008b      	lsls	r3, r1, #2
 800317c:	461a      	mov	r2, r3
 800317e:	4623      	mov	r3, r4
 8003180:	4628      	mov	r0, r5
 8003182:	4631      	mov	r1, r6
 8003184:	f7fd f820 	bl	80001c8 <__aeabi_uldivmod>
 8003188:	4603      	mov	r3, r0
 800318a:	460c      	mov	r4, r1
 800318c:	461a      	mov	r2, r3
 800318e:	4b50      	ldr	r3, [pc, #320]	; (80032d0 <UART_SetConfig+0x6f4>)
 8003190:	fba3 2302 	umull	r2, r3, r3, r2
 8003194:	095b      	lsrs	r3, r3, #5
 8003196:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	469b      	mov	fp, r3
 800319e:	f04f 0c00 	mov.w	ip, #0
 80031a2:	46d9      	mov	r9, fp
 80031a4:	46e2      	mov	sl, ip
 80031a6:	eb19 0309 	adds.w	r3, r9, r9
 80031aa:	eb4a 040a 	adc.w	r4, sl, sl
 80031ae:	4699      	mov	r9, r3
 80031b0:	46a2      	mov	sl, r4
 80031b2:	eb19 090b 	adds.w	r9, r9, fp
 80031b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80031ba:	f04f 0100 	mov.w	r1, #0
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031ce:	4689      	mov	r9, r1
 80031d0:	4692      	mov	sl, r2
 80031d2:	eb1b 0509 	adds.w	r5, fp, r9
 80031d6:	eb4c 060a 	adc.w	r6, ip, sl
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	4619      	mov	r1, r3
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	f04f 0400 	mov.w	r4, #0
 80031ec:	0094      	lsls	r4, r2, #2
 80031ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031f2:	008b      	lsls	r3, r1, #2
 80031f4:	461a      	mov	r2, r3
 80031f6:	4623      	mov	r3, r4
 80031f8:	4628      	mov	r0, r5
 80031fa:	4631      	mov	r1, r6
 80031fc:	f7fc ffe4 	bl	80001c8 <__aeabi_uldivmod>
 8003200:	4603      	mov	r3, r0
 8003202:	460c      	mov	r4, r1
 8003204:	461a      	mov	r2, r3
 8003206:	4b32      	ldr	r3, [pc, #200]	; (80032d0 <UART_SetConfig+0x6f4>)
 8003208:	fba3 1302 	umull	r1, r3, r3, r2
 800320c:	095b      	lsrs	r3, r3, #5
 800320e:	2164      	movs	r1, #100	; 0x64
 8003210:	fb01 f303 	mul.w	r3, r1, r3
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	3332      	adds	r3, #50	; 0x32
 800321a:	4a2d      	ldr	r2, [pc, #180]	; (80032d0 <UART_SetConfig+0x6f4>)
 800321c:	fba2 2303 	umull	r2, r3, r2, r3
 8003220:	095b      	lsrs	r3, r3, #5
 8003222:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003226:	4498      	add	r8, r3
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	469b      	mov	fp, r3
 800322c:	f04f 0c00 	mov.w	ip, #0
 8003230:	46d9      	mov	r9, fp
 8003232:	46e2      	mov	sl, ip
 8003234:	eb19 0309 	adds.w	r3, r9, r9
 8003238:	eb4a 040a 	adc.w	r4, sl, sl
 800323c:	4699      	mov	r9, r3
 800323e:	46a2      	mov	sl, r4
 8003240:	eb19 090b 	adds.w	r9, r9, fp
 8003244:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003248:	f04f 0100 	mov.w	r1, #0
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003254:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003258:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800325c:	4689      	mov	r9, r1
 800325e:	4692      	mov	sl, r2
 8003260:	eb1b 0509 	adds.w	r5, fp, r9
 8003264:	eb4c 060a 	adc.w	r6, ip, sl
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	4619      	mov	r1, r3
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	f04f 0300 	mov.w	r3, #0
 8003276:	f04f 0400 	mov.w	r4, #0
 800327a:	0094      	lsls	r4, r2, #2
 800327c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003280:	008b      	lsls	r3, r1, #2
 8003282:	461a      	mov	r2, r3
 8003284:	4623      	mov	r3, r4
 8003286:	4628      	mov	r0, r5
 8003288:	4631      	mov	r1, r6
 800328a:	f7fc ff9d 	bl	80001c8 <__aeabi_uldivmod>
 800328e:	4603      	mov	r3, r0
 8003290:	460c      	mov	r4, r1
 8003292:	461a      	mov	r2, r3
 8003294:	4b0e      	ldr	r3, [pc, #56]	; (80032d0 <UART_SetConfig+0x6f4>)
 8003296:	fba3 1302 	umull	r1, r3, r3, r2
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	2164      	movs	r1, #100	; 0x64
 800329e:	fb01 f303 	mul.w	r3, r1, r3
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	3332      	adds	r3, #50	; 0x32
 80032a8:	4a09      	ldr	r2, [pc, #36]	; (80032d0 <UART_SetConfig+0x6f4>)
 80032aa:	fba2 2303 	umull	r2, r3, r2, r3
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	f003 020f 	and.w	r2, r3, #15
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4442      	add	r2, r8
 80032ba:	609a      	str	r2, [r3, #8]
}
 80032bc:	e7ff      	b.n	80032be <UART_SetConfig+0x6e2>
 80032be:	bf00      	nop
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032c8:	40011000 	.word	0x40011000
 80032cc:	40011400 	.word	0x40011400
 80032d0:	51eb851f 	.word	0x51eb851f

080032d4 <__libc_init_array>:
 80032d4:	b570      	push	{r4, r5, r6, lr}
 80032d6:	4e0d      	ldr	r6, [pc, #52]	; (800330c <__libc_init_array+0x38>)
 80032d8:	4c0d      	ldr	r4, [pc, #52]	; (8003310 <__libc_init_array+0x3c>)
 80032da:	1ba4      	subs	r4, r4, r6
 80032dc:	10a4      	asrs	r4, r4, #2
 80032de:	2500      	movs	r5, #0
 80032e0:	42a5      	cmp	r5, r4
 80032e2:	d109      	bne.n	80032f8 <__libc_init_array+0x24>
 80032e4:	4e0b      	ldr	r6, [pc, #44]	; (8003314 <__libc_init_array+0x40>)
 80032e6:	4c0c      	ldr	r4, [pc, #48]	; (8003318 <__libc_init_array+0x44>)
 80032e8:	f000 f820 	bl	800332c <_init>
 80032ec:	1ba4      	subs	r4, r4, r6
 80032ee:	10a4      	asrs	r4, r4, #2
 80032f0:	2500      	movs	r5, #0
 80032f2:	42a5      	cmp	r5, r4
 80032f4:	d105      	bne.n	8003302 <__libc_init_array+0x2e>
 80032f6:	bd70      	pop	{r4, r5, r6, pc}
 80032f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032fc:	4798      	blx	r3
 80032fe:	3501      	adds	r5, #1
 8003300:	e7ee      	b.n	80032e0 <__libc_init_array+0xc>
 8003302:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003306:	4798      	blx	r3
 8003308:	3501      	adds	r5, #1
 800330a:	e7f2      	b.n	80032f2 <__libc_init_array+0x1e>
 800330c:	08003364 	.word	0x08003364
 8003310:	08003364 	.word	0x08003364
 8003314:	08003364 	.word	0x08003364
 8003318:	08003368 	.word	0x08003368

0800331c <memset>:
 800331c:	4402      	add	r2, r0
 800331e:	4603      	mov	r3, r0
 8003320:	4293      	cmp	r3, r2
 8003322:	d100      	bne.n	8003326 <memset+0xa>
 8003324:	4770      	bx	lr
 8003326:	f803 1b01 	strb.w	r1, [r3], #1
 800332a:	e7f9      	b.n	8003320 <memset+0x4>

0800332c <_init>:
 800332c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800332e:	bf00      	nop
 8003330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003332:	bc08      	pop	{r3}
 8003334:	469e      	mov	lr, r3
 8003336:	4770      	bx	lr

08003338 <_fini>:
 8003338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800333a:	bf00      	nop
 800333c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800333e:	bc08      	pop	{r3}
 8003340:	469e      	mov	lr, r3
 8003342:	4770      	bx	lr
